/*
Proxmox

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2023-01-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// FileSummary struct for FileSummary
type FileSummary struct {
	Path *string `json:"path,omitempty"`
	Content *string `json:"content,omitempty"`
	Repositories []FileRepositorySummary `json:"repositories,omitempty"`
	Digest []float32 `json:"digest,omitempty"`
	FileType *string `json:"file-type,omitempty"`
}

// NewFileSummary instantiates a new FileSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFileSummary() *FileSummary {
	this := FileSummary{}
	return &this
}

// NewFileSummaryWithDefaults instantiates a new FileSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFileSummaryWithDefaults() *FileSummary {
	this := FileSummary{}
	return &this
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *FileSummary) GetPath() string {
	if o == nil || isNil(o.Path) {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileSummary) GetPathOk() (*string, bool) {
	if o == nil || isNil(o.Path) {
    return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *FileSummary) HasPath() bool {
	if o != nil && !isNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *FileSummary) SetPath(v string) {
	o.Path = &v
}

// GetContent returns the Content field value if set, zero value otherwise.
func (o *FileSummary) GetContent() string {
	if o == nil || isNil(o.Content) {
		var ret string
		return ret
	}
	return *o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileSummary) GetContentOk() (*string, bool) {
	if o == nil || isNil(o.Content) {
    return nil, false
	}
	return o.Content, true
}

// HasContent returns a boolean if a field has been set.
func (o *FileSummary) HasContent() bool {
	if o != nil && !isNil(o.Content) {
		return true
	}

	return false
}

// SetContent gets a reference to the given string and assigns it to the Content field.
func (o *FileSummary) SetContent(v string) {
	o.Content = &v
}

// GetRepositories returns the Repositories field value if set, zero value otherwise.
func (o *FileSummary) GetRepositories() []FileRepositorySummary {
	if o == nil || isNil(o.Repositories) {
		var ret []FileRepositorySummary
		return ret
	}
	return o.Repositories
}

// GetRepositoriesOk returns a tuple with the Repositories field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileSummary) GetRepositoriesOk() ([]FileRepositorySummary, bool) {
	if o == nil || isNil(o.Repositories) {
    return nil, false
	}
	return o.Repositories, true
}

// HasRepositories returns a boolean if a field has been set.
func (o *FileSummary) HasRepositories() bool {
	if o != nil && !isNil(o.Repositories) {
		return true
	}

	return false
}

// SetRepositories gets a reference to the given []FileRepositorySummary and assigns it to the Repositories field.
func (o *FileSummary) SetRepositories(v []FileRepositorySummary) {
	o.Repositories = v
}

// GetDigest returns the Digest field value if set, zero value otherwise.
func (o *FileSummary) GetDigest() []float32 {
	if o == nil || isNil(o.Digest) {
		var ret []float32
		return ret
	}
	return o.Digest
}

// GetDigestOk returns a tuple with the Digest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileSummary) GetDigestOk() ([]float32, bool) {
	if o == nil || isNil(o.Digest) {
    return nil, false
	}
	return o.Digest, true
}

// HasDigest returns a boolean if a field has been set.
func (o *FileSummary) HasDigest() bool {
	if o != nil && !isNil(o.Digest) {
		return true
	}

	return false
}

// SetDigest gets a reference to the given []float32 and assigns it to the Digest field.
func (o *FileSummary) SetDigest(v []float32) {
	o.Digest = v
}

// GetFileType returns the FileType field value if set, zero value otherwise.
func (o *FileSummary) GetFileType() string {
	if o == nil || isNil(o.FileType) {
		var ret string
		return ret
	}
	return *o.FileType
}

// GetFileTypeOk returns a tuple with the FileType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileSummary) GetFileTypeOk() (*string, bool) {
	if o == nil || isNil(o.FileType) {
    return nil, false
	}
	return o.FileType, true
}

// HasFileType returns a boolean if a field has been set.
func (o *FileSummary) HasFileType() bool {
	if o != nil && !isNil(o.FileType) {
		return true
	}

	return false
}

// SetFileType gets a reference to the given string and assigns it to the FileType field.
func (o *FileSummary) SetFileType(v string) {
	o.FileType = &v
}

func (o FileSummary) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Path) {
		toSerialize["path"] = o.Path
	}
	if !isNil(o.Content) {
		toSerialize["content"] = o.Content
	}
	if !isNil(o.Repositories) {
		toSerialize["repositories"] = o.Repositories
	}
	if !isNil(o.Digest) {
		toSerialize["digest"] = o.Digest
	}
	if !isNil(o.FileType) {
		toSerialize["file-type"] = o.FileType
	}
	return json.Marshal(toSerialize)
}

type NullableFileSummary struct {
	value *FileSummary
	isSet bool
}

func (v NullableFileSummary) Get() *FileSummary {
	return v.value
}

func (v *NullableFileSummary) Set(val *FileSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableFileSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableFileSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileSummary(val *FileSummary) *NullableFileSummary {
	return &NullableFileSummary{value: val, isSet: true}
}

func (v NullableFileSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


