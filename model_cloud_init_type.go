/*
Proxmox

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2023-01-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// CloudInitType the model 'CloudInitType'
type CloudInitType string

// List of CloudInitType
const (
	CLOUDINITTYPE_USER CloudInitType = "user"
	CLOUDINITTYPE_NETWORK CloudInitType = "network"
	CLOUDINITTYPE_META CloudInitType = "meta"
)

// All allowed values of CloudInitType enum
var AllowedCloudInitTypeEnumValues = []CloudInitType{
	"user",
	"network",
	"meta",
}

func (v *CloudInitType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CloudInitType(value)
	for _, existing := range AllowedCloudInitTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CloudInitType", value)
}

// NewCloudInitTypeFromValue returns a pointer to a valid CloudInitType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCloudInitTypeFromValue(v string) (*CloudInitType, error) {
	ev := CloudInitType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CloudInitType: valid values are %v", v, AllowedCloudInitTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CloudInitType) IsValid() bool {
	for _, existing := range AllowedCloudInitTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CloudInitType value
func (v CloudInitType) Ptr() *CloudInitType {
	return &v
}

type NullableCloudInitType struct {
	value *CloudInitType
	isSet bool
}

func (v NullableCloudInitType) Get() *CloudInitType {
	return v.value
}

func (v *NullableCloudInitType) Set(val *CloudInitType) {
	v.value = val
	v.isSet = true
}

func (v NullableCloudInitType) IsSet() bool {
	return v.isSet
}

func (v *NullableCloudInitType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCloudInitType(val *CloudInitType) *NullableCloudInitType {
	return &NullableCloudInitType{value: val, isSet: true}
}

func (v NullableCloudInitType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCloudInitType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

