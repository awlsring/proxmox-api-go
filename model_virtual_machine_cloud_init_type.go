/*
Proxmox

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2023-01-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VirtualMachineCloudInitType the model 'VirtualMachineCloudInitType'
type VirtualMachineCloudInitType string

// List of VirtualMachineCloudInitType
const (
	VIRTUALMACHINECLOUDINITTYPE_CONFIGDRIVE2 VirtualMachineCloudInitType = "configdrive2"
	VIRTUALMACHINECLOUDINITTYPE_NOCLOUD VirtualMachineCloudInitType = "nocloud"
	VIRTUALMACHINECLOUDINITTYPE_OPENNEBULA VirtualMachineCloudInitType = "opennebula"
)

// All allowed values of VirtualMachineCloudInitType enum
var AllowedVirtualMachineCloudInitTypeEnumValues = []VirtualMachineCloudInitType{
	"configdrive2",
	"nocloud",
	"opennebula",
}

func (v *VirtualMachineCloudInitType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VirtualMachineCloudInitType(value)
	for _, existing := range AllowedVirtualMachineCloudInitTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VirtualMachineCloudInitType", value)
}

// NewVirtualMachineCloudInitTypeFromValue returns a pointer to a valid VirtualMachineCloudInitType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVirtualMachineCloudInitTypeFromValue(v string) (*VirtualMachineCloudInitType, error) {
	ev := VirtualMachineCloudInitType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VirtualMachineCloudInitType: valid values are %v", v, AllowedVirtualMachineCloudInitTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VirtualMachineCloudInitType) IsValid() bool {
	for _, existing := range AllowedVirtualMachineCloudInitTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VirtualMachineCloudInitType value
func (v VirtualMachineCloudInitType) Ptr() *VirtualMachineCloudInitType {
	return &v
}

type NullableVirtualMachineCloudInitType struct {
	value *VirtualMachineCloudInitType
	isSet bool
}

func (v NullableVirtualMachineCloudInitType) Get() *VirtualMachineCloudInitType {
	return v.value
}

func (v *NullableVirtualMachineCloudInitType) Set(val *VirtualMachineCloudInitType) {
	v.value = val
	v.isSet = true
}

func (v NullableVirtualMachineCloudInitType) IsSet() bool {
	return v.isSet
}

func (v *NullableVirtualMachineCloudInitType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVirtualMachineCloudInitType(val *VirtualMachineCloudInitType) *NullableVirtualMachineCloudInitType {
	return &NullableVirtualMachineCloudInitType{value: val, isSet: true}
}

func (v NullableVirtualMachineCloudInitType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVirtualMachineCloudInitType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

