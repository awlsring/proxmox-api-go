/*
Proxmox

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2023-01-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VirtualMachineKeyboard the model 'VirtualMachineKeyboard'
type VirtualMachineKeyboard string

// List of VirtualMachineKeyboard
const (
	VIRTUALMACHINEKEYBOARD_DE VirtualMachineKeyboard = "de"
	VIRTUALMACHINEKEYBOARD_DE_CH VirtualMachineKeyboard = "de-ch"
	VIRTUALMACHINEKEYBOARD_DA VirtualMachineKeyboard = "da"
	VIRTUALMACHINEKEYBOARD_EN_GB VirtualMachineKeyboard = "en-gb"
	VIRTUALMACHINEKEYBOARD_EN_US VirtualMachineKeyboard = "en-us"
	VIRTUALMACHINEKEYBOARD_ES VirtualMachineKeyboard = "es"
	VIRTUALMACHINEKEYBOARD_FI VirtualMachineKeyboard = "fi"
	VIRTUALMACHINEKEYBOARD_FR VirtualMachineKeyboard = "fr"
	VIRTUALMACHINEKEYBOARD_FR_BE VirtualMachineKeyboard = "fr-be"
	VIRTUALMACHINEKEYBOARD_FR_CH VirtualMachineKeyboard = "fr-ch"
	VIRTUALMACHINEKEYBOARD_FR_CA VirtualMachineKeyboard = "fr-ca"
	VIRTUALMACHINEKEYBOARD_HU VirtualMachineKeyboard = "hu"
	VIRTUALMACHINEKEYBOARD_IS VirtualMachineKeyboard = "is"
	VIRTUALMACHINEKEYBOARD_IT VirtualMachineKeyboard = "it"
	VIRTUALMACHINEKEYBOARD_JA VirtualMachineKeyboard = "ja"
	VIRTUALMACHINEKEYBOARD_LT VirtualMachineKeyboard = "lt"
	VIRTUALMACHINEKEYBOARD_MK VirtualMachineKeyboard = "mk"
	VIRTUALMACHINEKEYBOARD_NL VirtualMachineKeyboard = "nl"
	VIRTUALMACHINEKEYBOARD_NO VirtualMachineKeyboard = "no"
	VIRTUALMACHINEKEYBOARD_PL VirtualMachineKeyboard = "pl"
	VIRTUALMACHINEKEYBOARD_PT VirtualMachineKeyboard = "pt"
	VIRTUALMACHINEKEYBOARD_PT_BR VirtualMachineKeyboard = "pt-br"
	VIRTUALMACHINEKEYBOARD_SV VirtualMachineKeyboard = "sv"
	VIRTUALMACHINEKEYBOARD_SL VirtualMachineKeyboard = "sl"
	VIRTUALMACHINEKEYBOARD_TR VirtualMachineKeyboard = "tr"
)

// All allowed values of VirtualMachineKeyboard enum
var AllowedVirtualMachineKeyboardEnumValues = []VirtualMachineKeyboard{
	"de",
	"de-ch",
	"da",
	"en-gb",
	"en-us",
	"es",
	"fi",
	"fr",
	"fr-be",
	"fr-ch",
	"fr-ca",
	"hu",
	"is",
	"it",
	"ja",
	"lt",
	"mk",
	"nl",
	"no",
	"pl",
	"pt",
	"pt-br",
	"sv",
	"sl",
	"tr",
}

func (v *VirtualMachineKeyboard) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VirtualMachineKeyboard(value)
	for _, existing := range AllowedVirtualMachineKeyboardEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VirtualMachineKeyboard", value)
}

// NewVirtualMachineKeyboardFromValue returns a pointer to a valid VirtualMachineKeyboard
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVirtualMachineKeyboardFromValue(v string) (*VirtualMachineKeyboard, error) {
	ev := VirtualMachineKeyboard(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VirtualMachineKeyboard: valid values are %v", v, AllowedVirtualMachineKeyboardEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VirtualMachineKeyboard) IsValid() bool {
	for _, existing := range AllowedVirtualMachineKeyboardEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VirtualMachineKeyboard value
func (v VirtualMachineKeyboard) Ptr() *VirtualMachineKeyboard {
	return &v
}

type NullableVirtualMachineKeyboard struct {
	value *VirtualMachineKeyboard
	isSet bool
}

func (v NullableVirtualMachineKeyboard) Get() *VirtualMachineKeyboard {
	return v.value
}

func (v *NullableVirtualMachineKeyboard) Set(val *VirtualMachineKeyboard) {
	v.value = val
	v.isSet = true
}

func (v NullableVirtualMachineKeyboard) IsSet() bool {
	return v.isSet
}

func (v *NullableVirtualMachineKeyboard) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVirtualMachineKeyboard(val *VirtualMachineKeyboard) *NullableVirtualMachineKeyboard {
	return &NullableVirtualMachineKeyboard{value: val, isSet: true}
}

func (v NullableVirtualMachineKeyboard) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVirtualMachineKeyboard) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

