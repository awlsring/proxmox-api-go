/*
Proxmox

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2023-01-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// RenewNodeCertificateRequestContent struct for RenewNodeCertificateRequestContent
type RenewNodeCertificateRequestContent struct {
	// Force renewal even if expirary is more than 30 days away.
	Force *float32 `json:"force,omitempty"`
}

// NewRenewNodeCertificateRequestContent instantiates a new RenewNodeCertificateRequestContent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRenewNodeCertificateRequestContent() *RenewNodeCertificateRequestContent {
	this := RenewNodeCertificateRequestContent{}
	return &this
}

// NewRenewNodeCertificateRequestContentWithDefaults instantiates a new RenewNodeCertificateRequestContent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRenewNodeCertificateRequestContentWithDefaults() *RenewNodeCertificateRequestContent {
	this := RenewNodeCertificateRequestContent{}
	return &this
}

// GetForce returns the Force field value if set, zero value otherwise.
func (o *RenewNodeCertificateRequestContent) GetForce() float32 {
	if o == nil || isNil(o.Force) {
		var ret float32
		return ret
	}
	return *o.Force
}

// GetForceOk returns a tuple with the Force field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RenewNodeCertificateRequestContent) GetForceOk() (*float32, bool) {
	if o == nil || isNil(o.Force) {
    return nil, false
	}
	return o.Force, true
}

// HasForce returns a boolean if a field has been set.
func (o *RenewNodeCertificateRequestContent) HasForce() bool {
	if o != nil && !isNil(o.Force) {
		return true
	}

	return false
}

// SetForce gets a reference to the given float32 and assigns it to the Force field.
func (o *RenewNodeCertificateRequestContent) SetForce(v float32) {
	o.Force = &v
}

func (o RenewNodeCertificateRequestContent) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Force) {
		toSerialize["force"] = o.Force
	}
	return json.Marshal(toSerialize)
}

type NullableRenewNodeCertificateRequestContent struct {
	value *RenewNodeCertificateRequestContent
	isSet bool
}

func (v NullableRenewNodeCertificateRequestContent) Get() *RenewNodeCertificateRequestContent {
	return v.value
}

func (v *NullableRenewNodeCertificateRequestContent) Set(val *RenewNodeCertificateRequestContent) {
	v.value = val
	v.isSet = true
}

func (v NullableRenewNodeCertificateRequestContent) IsSet() bool {
	return v.isSet
}

func (v *NullableRenewNodeCertificateRequestContent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRenewNodeCertificateRequestContent(val *RenewNodeCertificateRequestContent) *NullableRenewNodeCertificateRequestContent {
	return &NullableRenewNodeCertificateRequestContent{value: val, isSet: true}
}

func (v NullableRenewNodeCertificateRequestContent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRenewNodeCertificateRequestContent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


