/*
Proxmox

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2023-01-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ZFSRaidLevel the model 'ZFSRaidLevel'
type ZFSRaidLevel string

// List of ZFSRaidLevel
const (
	ZFSRAIDLEVEL_SINGLE ZFSRaidLevel = "single"
	ZFSRAIDLEVEL_MIRROR ZFSRaidLevel = "mirror"
	ZFSRAIDLEVEL_RAIDZ ZFSRaidLevel = "raidz"
	ZFSRAIDLEVEL_RAIDZ2 ZFSRaidLevel = "raidz2"
	ZFSRAIDLEVEL_RAIDZ3 ZFSRaidLevel = "raidz3"
	ZFSRAIDLEVEL_RAID10 ZFSRaidLevel = "raid10"
	ZFSRAIDLEVEL_DRAID ZFSRaidLevel = "draid"
	ZFSRAIDLEVEL_DRAID2 ZFSRaidLevel = "draid2"
	ZFSRAIDLEVEL_DRAID3 ZFSRaidLevel = "draid3"
)

// All allowed values of ZFSRaidLevel enum
var AllowedZFSRaidLevelEnumValues = []ZFSRaidLevel{
	"single",
	"mirror",
	"raidz",
	"raidz2",
	"raidz3",
	"raid10",
	"draid",
	"draid2",
	"draid3",
}

func (v *ZFSRaidLevel) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ZFSRaidLevel(value)
	for _, existing := range AllowedZFSRaidLevelEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ZFSRaidLevel", value)
}

// NewZFSRaidLevelFromValue returns a pointer to a valid ZFSRaidLevel
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewZFSRaidLevelFromValue(v string) (*ZFSRaidLevel, error) {
	ev := ZFSRaidLevel(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ZFSRaidLevel: valid values are %v", v, AllowedZFSRaidLevelEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ZFSRaidLevel) IsValid() bool {
	for _, existing := range AllowedZFSRaidLevelEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ZFSRaidLevel value
func (v ZFSRaidLevel) Ptr() *ZFSRaidLevel {
	return &v
}

type NullableZFSRaidLevel struct {
	value *ZFSRaidLevel
	isSet bool
}

func (v NullableZFSRaidLevel) Get() *ZFSRaidLevel {
	return v.value
}

func (v *NullableZFSRaidLevel) Set(val *ZFSRaidLevel) {
	v.value = val
	v.isSet = true
}

func (v NullableZFSRaidLevel) IsSet() bool {
	return v.isSet
}

func (v *NullableZFSRaidLevel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableZFSRaidLevel(val *ZFSRaidLevel) *NullableZFSRaidLevel {
	return &NullableZFSRaidLevel{value: val, isSet: true}
}

func (v NullableZFSRaidLevel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableZFSRaidLevel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

