/*
Proxmox

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2023-01-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package proxmox

import (
	"encoding/json"
	"fmt"
)

// VirtualMachineBios the model 'VirtualMachineBios'
type VirtualMachineBios string

// List of VirtualMachineBios
const (
	VIRTUALMACHINEBIOS_SEABIOS VirtualMachineBios = "seabios"
	VIRTUALMACHINEBIOS_OVMF VirtualMachineBios = "ovmf"
)

// All allowed values of VirtualMachineBios enum
var AllowedVirtualMachineBiosEnumValues = []VirtualMachineBios{
	"seabios",
	"ovmf",
}

func (v *VirtualMachineBios) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VirtualMachineBios(value)
	for _, existing := range AllowedVirtualMachineBiosEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VirtualMachineBios", value)
}

// NewVirtualMachineBiosFromValue returns a pointer to a valid VirtualMachineBios
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVirtualMachineBiosFromValue(v string) (*VirtualMachineBios, error) {
	ev := VirtualMachineBios(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VirtualMachineBios: valid values are %v", v, AllowedVirtualMachineBiosEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VirtualMachineBios) IsValid() bool {
	for _, existing := range AllowedVirtualMachineBiosEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VirtualMachineBios value
func (v VirtualMachineBios) Ptr() *VirtualMachineBios {
	return &v
}

type NullableVirtualMachineBios struct {
	value *VirtualMachineBios
	isSet bool
}

func (v NullableVirtualMachineBios) Get() *VirtualMachineBios {
	return v.value
}

func (v *NullableVirtualMachineBios) Set(val *VirtualMachineBios) {
	v.value = val
	v.isSet = true
}

func (v NullableVirtualMachineBios) IsSet() bool {
	return v.isSet
}

func (v *NullableVirtualMachineBios) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVirtualMachineBios(val *VirtualMachineBios) *NullableVirtualMachineBios {
	return &NullableVirtualMachineBios{value: val, isSet: true}
}

func (v NullableVirtualMachineBios) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVirtualMachineBios) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

