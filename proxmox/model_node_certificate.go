/*
Proxmox

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2023-01-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package proxmox

import (
	"encoding/json"
)

// checks if the NodeCertificate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NodeCertificate{}

// NodeCertificate struct for NodeCertificate
type NodeCertificate struct {
	// The certificate's filename.
	Filename *string `json:"filename,omitempty"`
	// The certificate's fingerprint.
	Fingerprint *string `json:"fingerprint,omitempty"`
	// The certificate's issuer.
	Issuer *string `json:"issuer,omitempty"`
	// The certificate's notAfter timestamp.
	NotAfter *float32 `json:"notAfter,omitempty"`
	// The certificate's notAfter timestamp.
	NotBefore *float32 `json:"notBefore,omitempty"`
	Pem *string `json:"pem,omitempty"`
	// The certificate's key size.
	PublicKeyBits *string `json:"public-key-bits,omitempty"`
	// The certificate's key algorithm.
	PublicKeyType *string `json:"public-key-type,omitempty"`
	// The certificate's sans
	Sans []string `json:"sans,omitempty"`
	// The certificate's subject.
	Subject *string `json:"subject,omitempty"`
}

// NewNodeCertificate instantiates a new NodeCertificate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNodeCertificate() *NodeCertificate {
	this := NodeCertificate{}
	return &this
}

// NewNodeCertificateWithDefaults instantiates a new NodeCertificate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNodeCertificateWithDefaults() *NodeCertificate {
	this := NodeCertificate{}
	return &this
}

// GetFilename returns the Filename field value if set, zero value otherwise.
func (o *NodeCertificate) GetFilename() string {
	if o == nil || IsNil(o.Filename) {
		var ret string
		return ret
	}
	return *o.Filename
}

// GetFilenameOk returns a tuple with the Filename field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeCertificate) GetFilenameOk() (*string, bool) {
	if o == nil || IsNil(o.Filename) {
		return nil, false
	}
	return o.Filename, true
}

// HasFilename returns a boolean if a field has been set.
func (o *NodeCertificate) HasFilename() bool {
	if o != nil && !IsNil(o.Filename) {
		return true
	}

	return false
}

// SetFilename gets a reference to the given string and assigns it to the Filename field.
func (o *NodeCertificate) SetFilename(v string) {
	o.Filename = &v
}

// GetFingerprint returns the Fingerprint field value if set, zero value otherwise.
func (o *NodeCertificate) GetFingerprint() string {
	if o == nil || IsNil(o.Fingerprint) {
		var ret string
		return ret
	}
	return *o.Fingerprint
}

// GetFingerprintOk returns a tuple with the Fingerprint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeCertificate) GetFingerprintOk() (*string, bool) {
	if o == nil || IsNil(o.Fingerprint) {
		return nil, false
	}
	return o.Fingerprint, true
}

// HasFingerprint returns a boolean if a field has been set.
func (o *NodeCertificate) HasFingerprint() bool {
	if o != nil && !IsNil(o.Fingerprint) {
		return true
	}

	return false
}

// SetFingerprint gets a reference to the given string and assigns it to the Fingerprint field.
func (o *NodeCertificate) SetFingerprint(v string) {
	o.Fingerprint = &v
}

// GetIssuer returns the Issuer field value if set, zero value otherwise.
func (o *NodeCertificate) GetIssuer() string {
	if o == nil || IsNil(o.Issuer) {
		var ret string
		return ret
	}
	return *o.Issuer
}

// GetIssuerOk returns a tuple with the Issuer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeCertificate) GetIssuerOk() (*string, bool) {
	if o == nil || IsNil(o.Issuer) {
		return nil, false
	}
	return o.Issuer, true
}

// HasIssuer returns a boolean if a field has been set.
func (o *NodeCertificate) HasIssuer() bool {
	if o != nil && !IsNil(o.Issuer) {
		return true
	}

	return false
}

// SetIssuer gets a reference to the given string and assigns it to the Issuer field.
func (o *NodeCertificate) SetIssuer(v string) {
	o.Issuer = &v
}

// GetNotAfter returns the NotAfter field value if set, zero value otherwise.
func (o *NodeCertificate) GetNotAfter() float32 {
	if o == nil || IsNil(o.NotAfter) {
		var ret float32
		return ret
	}
	return *o.NotAfter
}

// GetNotAfterOk returns a tuple with the NotAfter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeCertificate) GetNotAfterOk() (*float32, bool) {
	if o == nil || IsNil(o.NotAfter) {
		return nil, false
	}
	return o.NotAfter, true
}

// HasNotAfter returns a boolean if a field has been set.
func (o *NodeCertificate) HasNotAfter() bool {
	if o != nil && !IsNil(o.NotAfter) {
		return true
	}

	return false
}

// SetNotAfter gets a reference to the given float32 and assigns it to the NotAfter field.
func (o *NodeCertificate) SetNotAfter(v float32) {
	o.NotAfter = &v
}

// GetNotBefore returns the NotBefore field value if set, zero value otherwise.
func (o *NodeCertificate) GetNotBefore() float32 {
	if o == nil || IsNil(o.NotBefore) {
		var ret float32
		return ret
	}
	return *o.NotBefore
}

// GetNotBeforeOk returns a tuple with the NotBefore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeCertificate) GetNotBeforeOk() (*float32, bool) {
	if o == nil || IsNil(o.NotBefore) {
		return nil, false
	}
	return o.NotBefore, true
}

// HasNotBefore returns a boolean if a field has been set.
func (o *NodeCertificate) HasNotBefore() bool {
	if o != nil && !IsNil(o.NotBefore) {
		return true
	}

	return false
}

// SetNotBefore gets a reference to the given float32 and assigns it to the NotBefore field.
func (o *NodeCertificate) SetNotBefore(v float32) {
	o.NotBefore = &v
}

// GetPem returns the Pem field value if set, zero value otherwise.
func (o *NodeCertificate) GetPem() string {
	if o == nil || IsNil(o.Pem) {
		var ret string
		return ret
	}
	return *o.Pem
}

// GetPemOk returns a tuple with the Pem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeCertificate) GetPemOk() (*string, bool) {
	if o == nil || IsNil(o.Pem) {
		return nil, false
	}
	return o.Pem, true
}

// HasPem returns a boolean if a field has been set.
func (o *NodeCertificate) HasPem() bool {
	if o != nil && !IsNil(o.Pem) {
		return true
	}

	return false
}

// SetPem gets a reference to the given string and assigns it to the Pem field.
func (o *NodeCertificate) SetPem(v string) {
	o.Pem = &v
}

// GetPublicKeyBits returns the PublicKeyBits field value if set, zero value otherwise.
func (o *NodeCertificate) GetPublicKeyBits() string {
	if o == nil || IsNil(o.PublicKeyBits) {
		var ret string
		return ret
	}
	return *o.PublicKeyBits
}

// GetPublicKeyBitsOk returns a tuple with the PublicKeyBits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeCertificate) GetPublicKeyBitsOk() (*string, bool) {
	if o == nil || IsNil(o.PublicKeyBits) {
		return nil, false
	}
	return o.PublicKeyBits, true
}

// HasPublicKeyBits returns a boolean if a field has been set.
func (o *NodeCertificate) HasPublicKeyBits() bool {
	if o != nil && !IsNil(o.PublicKeyBits) {
		return true
	}

	return false
}

// SetPublicKeyBits gets a reference to the given string and assigns it to the PublicKeyBits field.
func (o *NodeCertificate) SetPublicKeyBits(v string) {
	o.PublicKeyBits = &v
}

// GetPublicKeyType returns the PublicKeyType field value if set, zero value otherwise.
func (o *NodeCertificate) GetPublicKeyType() string {
	if o == nil || IsNil(o.PublicKeyType) {
		var ret string
		return ret
	}
	return *o.PublicKeyType
}

// GetPublicKeyTypeOk returns a tuple with the PublicKeyType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeCertificate) GetPublicKeyTypeOk() (*string, bool) {
	if o == nil || IsNil(o.PublicKeyType) {
		return nil, false
	}
	return o.PublicKeyType, true
}

// HasPublicKeyType returns a boolean if a field has been set.
func (o *NodeCertificate) HasPublicKeyType() bool {
	if o != nil && !IsNil(o.PublicKeyType) {
		return true
	}

	return false
}

// SetPublicKeyType gets a reference to the given string and assigns it to the PublicKeyType field.
func (o *NodeCertificate) SetPublicKeyType(v string) {
	o.PublicKeyType = &v
}

// GetSans returns the Sans field value if set, zero value otherwise.
func (o *NodeCertificate) GetSans() []string {
	if o == nil || IsNil(o.Sans) {
		var ret []string
		return ret
	}
	return o.Sans
}

// GetSansOk returns a tuple with the Sans field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeCertificate) GetSansOk() ([]string, bool) {
	if o == nil || IsNil(o.Sans) {
		return nil, false
	}
	return o.Sans, true
}

// HasSans returns a boolean if a field has been set.
func (o *NodeCertificate) HasSans() bool {
	if o != nil && !IsNil(o.Sans) {
		return true
	}

	return false
}

// SetSans gets a reference to the given []string and assigns it to the Sans field.
func (o *NodeCertificate) SetSans(v []string) {
	o.Sans = v
}

// GetSubject returns the Subject field value if set, zero value otherwise.
func (o *NodeCertificate) GetSubject() string {
	if o == nil || IsNil(o.Subject) {
		var ret string
		return ret
	}
	return *o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeCertificate) GetSubjectOk() (*string, bool) {
	if o == nil || IsNil(o.Subject) {
		return nil, false
	}
	return o.Subject, true
}

// HasSubject returns a boolean if a field has been set.
func (o *NodeCertificate) HasSubject() bool {
	if o != nil && !IsNil(o.Subject) {
		return true
	}

	return false
}

// SetSubject gets a reference to the given string and assigns it to the Subject field.
func (o *NodeCertificate) SetSubject(v string) {
	o.Subject = &v
}

func (o NodeCertificate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NodeCertificate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Filename) {
		toSerialize["filename"] = o.Filename
	}
	if !IsNil(o.Fingerprint) {
		toSerialize["fingerprint"] = o.Fingerprint
	}
	if !IsNil(o.Issuer) {
		toSerialize["issuer"] = o.Issuer
	}
	if !IsNil(o.NotAfter) {
		toSerialize["notAfter"] = o.NotAfter
	}
	if !IsNil(o.NotBefore) {
		toSerialize["notBefore"] = o.NotBefore
	}
	if !IsNil(o.Pem) {
		toSerialize["pem"] = o.Pem
	}
	if !IsNil(o.PublicKeyBits) {
		toSerialize["public-key-bits"] = o.PublicKeyBits
	}
	if !IsNil(o.PublicKeyType) {
		toSerialize["public-key-type"] = o.PublicKeyType
	}
	if !IsNil(o.Sans) {
		toSerialize["sans"] = o.Sans
	}
	if !IsNil(o.Subject) {
		toSerialize["subject"] = o.Subject
	}
	return toSerialize, nil
}

type NullableNodeCertificate struct {
	value *NodeCertificate
	isSet bool
}

func (v NullableNodeCertificate) Get() *NodeCertificate {
	return v.value
}

func (v *NullableNodeCertificate) Set(val *NodeCertificate) {
	v.value = val
	v.isSet = true
}

func (v NullableNodeCertificate) IsSet() bool {
	return v.isSet
}

func (v *NullableNodeCertificate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNodeCertificate(val *NodeCertificate) *NullableNodeCertificate {
	return &NullableNodeCertificate{value: val, isSet: true}
}

func (v NullableNodeCertificate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNodeCertificate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


