/*
Proxmox

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2023-01-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package proxmox

import (
	"encoding/json"
	"fmt"
)

// DiskTypeFilter the model 'DiskTypeFilter'
type DiskTypeFilter string

// List of DiskTypeFilter
const (
	DISKTYPEFILTER_UNUSED DiskTypeFilter = "unused"
	DISKTYPEFILTER_JOURNAL_DISKS DiskTypeFilter = "journal_disks"
)

// All allowed values of DiskTypeFilter enum
var AllowedDiskTypeFilterEnumValues = []DiskTypeFilter{
	"unused",
	"journal_disks",
}

func (v *DiskTypeFilter) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DiskTypeFilter(value)
	for _, existing := range AllowedDiskTypeFilterEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DiskTypeFilter", value)
}

// NewDiskTypeFilterFromValue returns a pointer to a valid DiskTypeFilter
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDiskTypeFilterFromValue(v string) (*DiskTypeFilter, error) {
	ev := DiskTypeFilter(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DiskTypeFilter: valid values are %v", v, AllowedDiskTypeFilterEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DiskTypeFilter) IsValid() bool {
	for _, existing := range AllowedDiskTypeFilterEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DiskTypeFilter value
func (v DiskTypeFilter) Ptr() *DiskTypeFilter {
	return &v
}

type NullableDiskTypeFilter struct {
	value *DiskTypeFilter
	isSet bool
}

func (v NullableDiskTypeFilter) Get() *DiskTypeFilter {
	return v.value
}

func (v *NullableDiskTypeFilter) Set(val *DiskTypeFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableDiskTypeFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableDiskTypeFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDiskTypeFilter(val *DiskTypeFilter) *NullableDiskTypeFilter {
	return &NullableDiskTypeFilter{value: val, isSet: true}
}

func (v NullableDiskTypeFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDiskTypeFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

