/*
Proxmox

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2023-01-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package proxmox

import (
	"encoding/json"
)

// GetHostnameResult struct for GetHostnameResult
type GetHostnameResult struct {
	HostName *string `json:"host-name,omitempty"`
}

// NewGetHostnameResult instantiates a new GetHostnameResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetHostnameResult() *GetHostnameResult {
	this := GetHostnameResult{}
	return &this
}

// NewGetHostnameResultWithDefaults instantiates a new GetHostnameResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetHostnameResultWithDefaults() *GetHostnameResult {
	this := GetHostnameResult{}
	return &this
}

// GetHostName returns the HostName field value if set, zero value otherwise.
func (o *GetHostnameResult) GetHostName() string {
	if o == nil || isNil(o.HostName) {
		var ret string
		return ret
	}
	return *o.HostName
}

// GetHostNameOk returns a tuple with the HostName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetHostnameResult) GetHostNameOk() (*string, bool) {
	if o == nil || isNil(o.HostName) {
    return nil, false
	}
	return o.HostName, true
}

// HasHostName returns a boolean if a field has been set.
func (o *GetHostnameResult) HasHostName() bool {
	if o != nil && !isNil(o.HostName) {
		return true
	}

	return false
}

// SetHostName gets a reference to the given string and assigns it to the HostName field.
func (o *GetHostnameResult) SetHostName(v string) {
	o.HostName = &v
}

func (o GetHostnameResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.HostName) {
		toSerialize["host-name"] = o.HostName
	}
	return json.Marshal(toSerialize)
}

type NullableGetHostnameResult struct {
	value *GetHostnameResult
	isSet bool
}

func (v NullableGetHostnameResult) Get() *GetHostnameResult {
	return v.value
}

func (v *NullableGetHostnameResult) Set(val *GetHostnameResult) {
	v.value = val
	v.isSet = true
}

func (v NullableGetHostnameResult) IsSet() bool {
	return v.isSet
}

func (v *NullableGetHostnameResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetHostnameResult(val *GetHostnameResult) *NullableGetHostnameResult {
	return &NullableGetHostnameResult{value: val, isSet: true}
}

func (v NullableGetHostnameResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetHostnameResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


