/*
Proxmox

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2023-01-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package proxmox

import (
	"encoding/json"
	"fmt"
)

// StorageVolumeType the model 'StorageVolumeType'
type StorageVolumeType string

// List of StorageVolumeType
const (
	STORAGEVOLUMETYPE_RAW StorageVolumeType = "raw"
	STORAGEVOLUMETYPE_QCOW2 StorageVolumeType = "qcow2"
	STORAGEVOLUMETYPE_SUBVOL StorageVolumeType = "subvol"
)

// All allowed values of StorageVolumeType enum
var AllowedStorageVolumeTypeEnumValues = []StorageVolumeType{
	"raw",
	"qcow2",
	"subvol",
}

func (v *StorageVolumeType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := StorageVolumeType(value)
	for _, existing := range AllowedStorageVolumeTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid StorageVolumeType", value)
}

// NewStorageVolumeTypeFromValue returns a pointer to a valid StorageVolumeType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewStorageVolumeTypeFromValue(v string) (*StorageVolumeType, error) {
	ev := StorageVolumeType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for StorageVolumeType: valid values are %v", v, AllowedStorageVolumeTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v StorageVolumeType) IsValid() bool {
	for _, existing := range AllowedStorageVolumeTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to StorageVolumeType value
func (v StorageVolumeType) Ptr() *StorageVolumeType {
	return &v
}

type NullableStorageVolumeType struct {
	value *StorageVolumeType
	isSet bool
}

func (v NullableStorageVolumeType) Get() *StorageVolumeType {
	return v.value
}

func (v *NullableStorageVolumeType) Set(val *StorageVolumeType) {
	v.value = val
	v.isSet = true
}

func (v NullableStorageVolumeType) IsSet() bool {
	return v.isSet
}

func (v *NullableStorageVolumeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStorageVolumeType(val *StorageVolumeType) *NullableStorageVolumeType {
	return &NullableStorageVolumeType{value: val, isSet: true}
}

func (v NullableStorageVolumeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStorageVolumeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

