/*
Proxmox

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2023-01-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package proxmox

import (
	"encoding/json"
	"fmt"
)

// RealmSslVersion the model 'RealmSslVersion'
type RealmSslVersion string

// List of RealmSslVersion
const (
	REALMSSLVERSION_TLSV1 RealmSslVersion = "tlsv1"
	REALMSSLVERSION_TLSV1_1 RealmSslVersion = "tlsv1_1"
	REALMSSLVERSION_TLSV1_2 RealmSslVersion = "tlsv1_2"
	REALMSSLVERSION_TLSV1_3 RealmSslVersion = "tlsv1_3"
)

// All allowed values of RealmSslVersion enum
var AllowedRealmSslVersionEnumValues = []RealmSslVersion{
	"tlsv1",
	"tlsv1_1",
	"tlsv1_2",
	"tlsv1_3",
}

func (v *RealmSslVersion) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RealmSslVersion(value)
	for _, existing := range AllowedRealmSslVersionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RealmSslVersion", value)
}

// NewRealmSslVersionFromValue returns a pointer to a valid RealmSslVersion
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRealmSslVersionFromValue(v string) (*RealmSslVersion, error) {
	ev := RealmSslVersion(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RealmSslVersion: valid values are %v", v, AllowedRealmSslVersionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RealmSslVersion) IsValid() bool {
	for _, existing := range AllowedRealmSslVersionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RealmSslVersion value
func (v RealmSslVersion) Ptr() *RealmSslVersion {
	return &v
}

type NullableRealmSslVersion struct {
	value *RealmSslVersion
	isSet bool
}

func (v NullableRealmSslVersion) Get() *RealmSslVersion {
	return v.value
}

func (v *NullableRealmSslVersion) Set(val *RealmSslVersion) {
	v.value = val
	v.isSet = true
}

func (v NullableRealmSslVersion) IsSet() bool {
	return v.isSet
}

func (v *NullableRealmSslVersion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRealmSslVersion(val *RealmSslVersion) *NullableRealmSslVersion {
	return &NullableRealmSslVersion{value: val, isSet: true}
}

func (v NullableRealmSslVersion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRealmSslVersion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

