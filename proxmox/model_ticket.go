/*
Proxmox

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2023-01-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package proxmox

import (
	"encoding/json"
)

// Ticket struct for Ticket
type Ticket struct {
	Username string `json:"username"`
	Cap *map[string]map[string]float32 `json:"cap,omitempty"`
	CSRFPreventionToken *string `json:"CSRFPreventionToken,omitempty"`
	Ticket *string `json:"ticket,omitempty"`
	Clustername *string `json:"clustername,omitempty"`
}

// NewTicket instantiates a new Ticket object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTicket(username string) *Ticket {
	this := Ticket{}
	this.Username = username
	return &this
}

// NewTicketWithDefaults instantiates a new Ticket object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTicketWithDefaults() *Ticket {
	this := Ticket{}
	return &this
}

// GetUsername returns the Username field value
func (o *Ticket) GetUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Username
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
func (o *Ticket) GetUsernameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Username, true
}

// SetUsername sets field value
func (o *Ticket) SetUsername(v string) {
	o.Username = v
}

// GetCap returns the Cap field value if set, zero value otherwise.
func (o *Ticket) GetCap() map[string]map[string]float32 {
	if o == nil || isNil(o.Cap) {
		var ret map[string]map[string]float32
		return ret
	}
	return *o.Cap
}

// GetCapOk returns a tuple with the Cap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ticket) GetCapOk() (*map[string]map[string]float32, bool) {
	if o == nil || isNil(o.Cap) {
    return nil, false
	}
	return o.Cap, true
}

// HasCap returns a boolean if a field has been set.
func (o *Ticket) HasCap() bool {
	if o != nil && !isNil(o.Cap) {
		return true
	}

	return false
}

// SetCap gets a reference to the given map[string]map[string]float32 and assigns it to the Cap field.
func (o *Ticket) SetCap(v map[string]map[string]float32) {
	o.Cap = &v
}

// GetCSRFPreventionToken returns the CSRFPreventionToken field value if set, zero value otherwise.
func (o *Ticket) GetCSRFPreventionToken() string {
	if o == nil || isNil(o.CSRFPreventionToken) {
		var ret string
		return ret
	}
	return *o.CSRFPreventionToken
}

// GetCSRFPreventionTokenOk returns a tuple with the CSRFPreventionToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ticket) GetCSRFPreventionTokenOk() (*string, bool) {
	if o == nil || isNil(o.CSRFPreventionToken) {
    return nil, false
	}
	return o.CSRFPreventionToken, true
}

// HasCSRFPreventionToken returns a boolean if a field has been set.
func (o *Ticket) HasCSRFPreventionToken() bool {
	if o != nil && !isNil(o.CSRFPreventionToken) {
		return true
	}

	return false
}

// SetCSRFPreventionToken gets a reference to the given string and assigns it to the CSRFPreventionToken field.
func (o *Ticket) SetCSRFPreventionToken(v string) {
	o.CSRFPreventionToken = &v
}

// GetTicket returns the Ticket field value if set, zero value otherwise.
func (o *Ticket) GetTicket() string {
	if o == nil || isNil(o.Ticket) {
		var ret string
		return ret
	}
	return *o.Ticket
}

// GetTicketOk returns a tuple with the Ticket field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ticket) GetTicketOk() (*string, bool) {
	if o == nil || isNil(o.Ticket) {
    return nil, false
	}
	return o.Ticket, true
}

// HasTicket returns a boolean if a field has been set.
func (o *Ticket) HasTicket() bool {
	if o != nil && !isNil(o.Ticket) {
		return true
	}

	return false
}

// SetTicket gets a reference to the given string and assigns it to the Ticket field.
func (o *Ticket) SetTicket(v string) {
	o.Ticket = &v
}

// GetClustername returns the Clustername field value if set, zero value otherwise.
func (o *Ticket) GetClustername() string {
	if o == nil || isNil(o.Clustername) {
		var ret string
		return ret
	}
	return *o.Clustername
}

// GetClusternameOk returns a tuple with the Clustername field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ticket) GetClusternameOk() (*string, bool) {
	if o == nil || isNil(o.Clustername) {
    return nil, false
	}
	return o.Clustername, true
}

// HasClustername returns a boolean if a field has been set.
func (o *Ticket) HasClustername() bool {
	if o != nil && !isNil(o.Clustername) {
		return true
	}

	return false
}

// SetClustername gets a reference to the given string and assigns it to the Clustername field.
func (o *Ticket) SetClustername(v string) {
	o.Clustername = &v
}

func (o Ticket) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["username"] = o.Username
	}
	if !isNil(o.Cap) {
		toSerialize["cap"] = o.Cap
	}
	if !isNil(o.CSRFPreventionToken) {
		toSerialize["CSRFPreventionToken"] = o.CSRFPreventionToken
	}
	if !isNil(o.Ticket) {
		toSerialize["ticket"] = o.Ticket
	}
	if !isNil(o.Clustername) {
		toSerialize["clustername"] = o.Clustername
	}
	return json.Marshal(toSerialize)
}

type NullableTicket struct {
	value *Ticket
	isSet bool
}

func (v NullableTicket) Get() *Ticket {
	return v.value
}

func (v *NullableTicket) Set(val *Ticket) {
	v.value = val
	v.isSet = true
}

func (v NullableTicket) IsSet() bool {
	return v.isSet
}

func (v *NullableTicket) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTicket(val *Ticket) *NullableTicket {
	return &NullableTicket{value: val, isSet: true}
}

func (v NullableTicket) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTicket) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


