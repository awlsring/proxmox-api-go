/*
Proxmox

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2023-01-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package proxmox

import (
	"encoding/json"
	"fmt"
)

// RealmMode the model 'RealmMode'
type RealmMode string

// List of RealmMode
const (
	REALMMODE_LDAP RealmMode = "ldap"
	REALMMODE_LDAPS RealmMode = "ldaps"
	REALMMODE_LDAPSTARTTLS RealmMode = "ldap+starttls"
)

// All allowed values of RealmMode enum
var AllowedRealmModeEnumValues = []RealmMode{
	"ldap",
	"ldaps",
	"ldap+starttls",
}

func (v *RealmMode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RealmMode(value)
	for _, existing := range AllowedRealmModeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RealmMode", value)
}

// NewRealmModeFromValue returns a pointer to a valid RealmMode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRealmModeFromValue(v string) (*RealmMode, error) {
	ev := RealmMode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RealmMode: valid values are %v", v, AllowedRealmModeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RealmMode) IsValid() bool {
	for _, existing := range AllowedRealmModeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RealmMode value
func (v RealmMode) Ptr() *RealmMode {
	return &v
}

type NullableRealmMode struct {
	value *RealmMode
	isSet bool
}

func (v NullableRealmMode) Get() *RealmMode {
	return v.value
}

func (v *NullableRealmMode) Set(val *RealmMode) {
	v.value = val
	v.isSet = true
}

func (v NullableRealmMode) IsSet() bool {
	return v.isSet
}

func (v *NullableRealmMode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRealmMode(val *RealmMode) *NullableRealmMode {
	return &NullableRealmMode{value: val, isSet: true}
}

func (v NullableRealmMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRealmMode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

