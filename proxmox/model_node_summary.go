/*
Proxmox

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2023-01-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package proxmox

import (
	"encoding/json"
)

// NodeSummary struct for NodeSummary
type NodeSummary struct {
	// The name of the node
	Node string `json:"node"`
	// Max memory allocated in bytes
	Maxmem *float32 `json:"maxmem,omitempty"`
	// Current memory utilization in bytes
	Mem *float32 `json:"mem,omitempty"`
	// Current disk utilization in bytes
	Disk *float32 `json:"disk,omitempty"`
	// Max disk space available in bytes
	Maxdisk *float32 `json:"maxdisk,omitempty"`
	// Amount of CPU cores available on node
	Maxcpu *float32 `json:"maxcpu,omitempty"`
	// The node id. This is a string of 'node/<name>'
	Id *string `json:"id,omitempty"`
	// The node's support level
	Level *string `json:"level,omitempty"`
	SslFingerprint *string `json:"ssl_fingerprint,omitempty"`
	// The system type. Seems to be always node
	Type *string `json:"type,omitempty"`
	// The virtual machines cpu utilization in percent
	Cpu *float32 `json:"cpu,omitempty"`
	// The node's uptime in seconds
	Uptime *float32 `json:"uptime,omitempty"`
	Status *NodeStatus `json:"status,omitempty"`
}

// NewNodeSummary instantiates a new NodeSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNodeSummary(node string) *NodeSummary {
	this := NodeSummary{}
	this.Node = node
	return &this
}

// NewNodeSummaryWithDefaults instantiates a new NodeSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNodeSummaryWithDefaults() *NodeSummary {
	this := NodeSummary{}
	return &this
}

// GetNode returns the Node field value
func (o *NodeSummary) GetNode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Node
}

// GetNodeOk returns a tuple with the Node field value
// and a boolean to check if the value has been set.
func (o *NodeSummary) GetNodeOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Node, true
}

// SetNode sets field value
func (o *NodeSummary) SetNode(v string) {
	o.Node = v
}

// GetMaxmem returns the Maxmem field value if set, zero value otherwise.
func (o *NodeSummary) GetMaxmem() float32 {
	if o == nil || isNil(o.Maxmem) {
		var ret float32
		return ret
	}
	return *o.Maxmem
}

// GetMaxmemOk returns a tuple with the Maxmem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeSummary) GetMaxmemOk() (*float32, bool) {
	if o == nil || isNil(o.Maxmem) {
    return nil, false
	}
	return o.Maxmem, true
}

// HasMaxmem returns a boolean if a field has been set.
func (o *NodeSummary) HasMaxmem() bool {
	if o != nil && !isNil(o.Maxmem) {
		return true
	}

	return false
}

// SetMaxmem gets a reference to the given float32 and assigns it to the Maxmem field.
func (o *NodeSummary) SetMaxmem(v float32) {
	o.Maxmem = &v
}

// GetMem returns the Mem field value if set, zero value otherwise.
func (o *NodeSummary) GetMem() float32 {
	if o == nil || isNil(o.Mem) {
		var ret float32
		return ret
	}
	return *o.Mem
}

// GetMemOk returns a tuple with the Mem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeSummary) GetMemOk() (*float32, bool) {
	if o == nil || isNil(o.Mem) {
    return nil, false
	}
	return o.Mem, true
}

// HasMem returns a boolean if a field has been set.
func (o *NodeSummary) HasMem() bool {
	if o != nil && !isNil(o.Mem) {
		return true
	}

	return false
}

// SetMem gets a reference to the given float32 and assigns it to the Mem field.
func (o *NodeSummary) SetMem(v float32) {
	o.Mem = &v
}

// GetDisk returns the Disk field value if set, zero value otherwise.
func (o *NodeSummary) GetDisk() float32 {
	if o == nil || isNil(o.Disk) {
		var ret float32
		return ret
	}
	return *o.Disk
}

// GetDiskOk returns a tuple with the Disk field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeSummary) GetDiskOk() (*float32, bool) {
	if o == nil || isNil(o.Disk) {
    return nil, false
	}
	return o.Disk, true
}

// HasDisk returns a boolean if a field has been set.
func (o *NodeSummary) HasDisk() bool {
	if o != nil && !isNil(o.Disk) {
		return true
	}

	return false
}

// SetDisk gets a reference to the given float32 and assigns it to the Disk field.
func (o *NodeSummary) SetDisk(v float32) {
	o.Disk = &v
}

// GetMaxdisk returns the Maxdisk field value if set, zero value otherwise.
func (o *NodeSummary) GetMaxdisk() float32 {
	if o == nil || isNil(o.Maxdisk) {
		var ret float32
		return ret
	}
	return *o.Maxdisk
}

// GetMaxdiskOk returns a tuple with the Maxdisk field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeSummary) GetMaxdiskOk() (*float32, bool) {
	if o == nil || isNil(o.Maxdisk) {
    return nil, false
	}
	return o.Maxdisk, true
}

// HasMaxdisk returns a boolean if a field has been set.
func (o *NodeSummary) HasMaxdisk() bool {
	if o != nil && !isNil(o.Maxdisk) {
		return true
	}

	return false
}

// SetMaxdisk gets a reference to the given float32 and assigns it to the Maxdisk field.
func (o *NodeSummary) SetMaxdisk(v float32) {
	o.Maxdisk = &v
}

// GetMaxcpu returns the Maxcpu field value if set, zero value otherwise.
func (o *NodeSummary) GetMaxcpu() float32 {
	if o == nil || isNil(o.Maxcpu) {
		var ret float32
		return ret
	}
	return *o.Maxcpu
}

// GetMaxcpuOk returns a tuple with the Maxcpu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeSummary) GetMaxcpuOk() (*float32, bool) {
	if o == nil || isNil(o.Maxcpu) {
    return nil, false
	}
	return o.Maxcpu, true
}

// HasMaxcpu returns a boolean if a field has been set.
func (o *NodeSummary) HasMaxcpu() bool {
	if o != nil && !isNil(o.Maxcpu) {
		return true
	}

	return false
}

// SetMaxcpu gets a reference to the given float32 and assigns it to the Maxcpu field.
func (o *NodeSummary) SetMaxcpu(v float32) {
	o.Maxcpu = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *NodeSummary) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeSummary) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *NodeSummary) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *NodeSummary) SetId(v string) {
	o.Id = &v
}

// GetLevel returns the Level field value if set, zero value otherwise.
func (o *NodeSummary) GetLevel() string {
	if o == nil || isNil(o.Level) {
		var ret string
		return ret
	}
	return *o.Level
}

// GetLevelOk returns a tuple with the Level field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeSummary) GetLevelOk() (*string, bool) {
	if o == nil || isNil(o.Level) {
    return nil, false
	}
	return o.Level, true
}

// HasLevel returns a boolean if a field has been set.
func (o *NodeSummary) HasLevel() bool {
	if o != nil && !isNil(o.Level) {
		return true
	}

	return false
}

// SetLevel gets a reference to the given string and assigns it to the Level field.
func (o *NodeSummary) SetLevel(v string) {
	o.Level = &v
}

// GetSslFingerprint returns the SslFingerprint field value if set, zero value otherwise.
func (o *NodeSummary) GetSslFingerprint() string {
	if o == nil || isNil(o.SslFingerprint) {
		var ret string
		return ret
	}
	return *o.SslFingerprint
}

// GetSslFingerprintOk returns a tuple with the SslFingerprint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeSummary) GetSslFingerprintOk() (*string, bool) {
	if o == nil || isNil(o.SslFingerprint) {
    return nil, false
	}
	return o.SslFingerprint, true
}

// HasSslFingerprint returns a boolean if a field has been set.
func (o *NodeSummary) HasSslFingerprint() bool {
	if o != nil && !isNil(o.SslFingerprint) {
		return true
	}

	return false
}

// SetSslFingerprint gets a reference to the given string and assigns it to the SslFingerprint field.
func (o *NodeSummary) SetSslFingerprint(v string) {
	o.SslFingerprint = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *NodeSummary) GetType() string {
	if o == nil || isNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeSummary) GetTypeOk() (*string, bool) {
	if o == nil || isNil(o.Type) {
    return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *NodeSummary) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *NodeSummary) SetType(v string) {
	o.Type = &v
}

// GetCpu returns the Cpu field value if set, zero value otherwise.
func (o *NodeSummary) GetCpu() float32 {
	if o == nil || isNil(o.Cpu) {
		var ret float32
		return ret
	}
	return *o.Cpu
}

// GetCpuOk returns a tuple with the Cpu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeSummary) GetCpuOk() (*float32, bool) {
	if o == nil || isNil(o.Cpu) {
    return nil, false
	}
	return o.Cpu, true
}

// HasCpu returns a boolean if a field has been set.
func (o *NodeSummary) HasCpu() bool {
	if o != nil && !isNil(o.Cpu) {
		return true
	}

	return false
}

// SetCpu gets a reference to the given float32 and assigns it to the Cpu field.
func (o *NodeSummary) SetCpu(v float32) {
	o.Cpu = &v
}

// GetUptime returns the Uptime field value if set, zero value otherwise.
func (o *NodeSummary) GetUptime() float32 {
	if o == nil || isNil(o.Uptime) {
		var ret float32
		return ret
	}
	return *o.Uptime
}

// GetUptimeOk returns a tuple with the Uptime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeSummary) GetUptimeOk() (*float32, bool) {
	if o == nil || isNil(o.Uptime) {
    return nil, false
	}
	return o.Uptime, true
}

// HasUptime returns a boolean if a field has been set.
func (o *NodeSummary) HasUptime() bool {
	if o != nil && !isNil(o.Uptime) {
		return true
	}

	return false
}

// SetUptime gets a reference to the given float32 and assigns it to the Uptime field.
func (o *NodeSummary) SetUptime(v float32) {
	o.Uptime = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *NodeSummary) GetStatus() NodeStatus {
	if o == nil || isNil(o.Status) {
		var ret NodeStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeSummary) GetStatusOk() (*NodeStatus, bool) {
	if o == nil || isNil(o.Status) {
    return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *NodeSummary) HasStatus() bool {
	if o != nil && !isNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given NodeStatus and assigns it to the Status field.
func (o *NodeSummary) SetStatus(v NodeStatus) {
	o.Status = &v
}

func (o NodeSummary) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["node"] = o.Node
	}
	if !isNil(o.Maxmem) {
		toSerialize["maxmem"] = o.Maxmem
	}
	if !isNil(o.Mem) {
		toSerialize["mem"] = o.Mem
	}
	if !isNil(o.Disk) {
		toSerialize["disk"] = o.Disk
	}
	if !isNil(o.Maxdisk) {
		toSerialize["maxdisk"] = o.Maxdisk
	}
	if !isNil(o.Maxcpu) {
		toSerialize["maxcpu"] = o.Maxcpu
	}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.Level) {
		toSerialize["level"] = o.Level
	}
	if !isNil(o.SslFingerprint) {
		toSerialize["ssl_fingerprint"] = o.SslFingerprint
	}
	if !isNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !isNil(o.Cpu) {
		toSerialize["cpu"] = o.Cpu
	}
	if !isNil(o.Uptime) {
		toSerialize["uptime"] = o.Uptime
	}
	if !isNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return json.Marshal(toSerialize)
}

type NullableNodeSummary struct {
	value *NodeSummary
	isSet bool
}

func (v NullableNodeSummary) Get() *NodeSummary {
	return v.value
}

func (v *NullableNodeSummary) Set(val *NodeSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableNodeSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableNodeSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNodeSummary(val *NodeSummary) *NullableNodeSummary {
	return &NullableNodeSummary{value: val, isSet: true}
}

func (v NullableNodeSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNodeSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


