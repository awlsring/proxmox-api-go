/*
Proxmox

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2023-01-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package proxmox

import (
	"encoding/json"
)

// checks if the UpdateNodeDnsRequestContent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateNodeDnsRequestContent{}

// UpdateNodeDnsRequestContent struct for UpdateNodeDnsRequestContent
type UpdateNodeDnsRequestContent struct {
	Dns1 *string `json:"dns1,omitempty"`
	Dns2 *string `json:"dns2,omitempty"`
	Dns3 *string `json:"dns3,omitempty"`
}

// NewUpdateNodeDnsRequestContent instantiates a new UpdateNodeDnsRequestContent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateNodeDnsRequestContent() *UpdateNodeDnsRequestContent {
	this := UpdateNodeDnsRequestContent{}
	return &this
}

// NewUpdateNodeDnsRequestContentWithDefaults instantiates a new UpdateNodeDnsRequestContent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateNodeDnsRequestContentWithDefaults() *UpdateNodeDnsRequestContent {
	this := UpdateNodeDnsRequestContent{}
	return &this
}

// GetDns1 returns the Dns1 field value if set, zero value otherwise.
func (o *UpdateNodeDnsRequestContent) GetDns1() string {
	if o == nil || IsNil(o.Dns1) {
		var ret string
		return ret
	}
	return *o.Dns1
}

// GetDns1Ok returns a tuple with the Dns1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateNodeDnsRequestContent) GetDns1Ok() (*string, bool) {
	if o == nil || IsNil(o.Dns1) {
		return nil, false
	}
	return o.Dns1, true
}

// HasDns1 returns a boolean if a field has been set.
func (o *UpdateNodeDnsRequestContent) HasDns1() bool {
	if o != nil && !IsNil(o.Dns1) {
		return true
	}

	return false
}

// SetDns1 gets a reference to the given string and assigns it to the Dns1 field.
func (o *UpdateNodeDnsRequestContent) SetDns1(v string) {
	o.Dns1 = &v
}

// GetDns2 returns the Dns2 field value if set, zero value otherwise.
func (o *UpdateNodeDnsRequestContent) GetDns2() string {
	if o == nil || IsNil(o.Dns2) {
		var ret string
		return ret
	}
	return *o.Dns2
}

// GetDns2Ok returns a tuple with the Dns2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateNodeDnsRequestContent) GetDns2Ok() (*string, bool) {
	if o == nil || IsNil(o.Dns2) {
		return nil, false
	}
	return o.Dns2, true
}

// HasDns2 returns a boolean if a field has been set.
func (o *UpdateNodeDnsRequestContent) HasDns2() bool {
	if o != nil && !IsNil(o.Dns2) {
		return true
	}

	return false
}

// SetDns2 gets a reference to the given string and assigns it to the Dns2 field.
func (o *UpdateNodeDnsRequestContent) SetDns2(v string) {
	o.Dns2 = &v
}

// GetDns3 returns the Dns3 field value if set, zero value otherwise.
func (o *UpdateNodeDnsRequestContent) GetDns3() string {
	if o == nil || IsNil(o.Dns3) {
		var ret string
		return ret
	}
	return *o.Dns3
}

// GetDns3Ok returns a tuple with the Dns3 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateNodeDnsRequestContent) GetDns3Ok() (*string, bool) {
	if o == nil || IsNil(o.Dns3) {
		return nil, false
	}
	return o.Dns3, true
}

// HasDns3 returns a boolean if a field has been set.
func (o *UpdateNodeDnsRequestContent) HasDns3() bool {
	if o != nil && !IsNil(o.Dns3) {
		return true
	}

	return false
}

// SetDns3 gets a reference to the given string and assigns it to the Dns3 field.
func (o *UpdateNodeDnsRequestContent) SetDns3(v string) {
	o.Dns3 = &v
}

func (o UpdateNodeDnsRequestContent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateNodeDnsRequestContent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Dns1) {
		toSerialize["dns1"] = o.Dns1
	}
	if !IsNil(o.Dns2) {
		toSerialize["dns2"] = o.Dns2
	}
	if !IsNil(o.Dns3) {
		toSerialize["dns3"] = o.Dns3
	}
	return toSerialize, nil
}

type NullableUpdateNodeDnsRequestContent struct {
	value *UpdateNodeDnsRequestContent
	isSet bool
}

func (v NullableUpdateNodeDnsRequestContent) Get() *UpdateNodeDnsRequestContent {
	return v.value
}

func (v *NullableUpdateNodeDnsRequestContent) Set(val *UpdateNodeDnsRequestContent) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateNodeDnsRequestContent) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateNodeDnsRequestContent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateNodeDnsRequestContent(val *UpdateNodeDnsRequestContent) *NullableUpdateNodeDnsRequestContent {
	return &NullableUpdateNodeDnsRequestContent{value: val, isSet: true}
}

func (v NullableUpdateNodeDnsRequestContent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateNodeDnsRequestContent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


