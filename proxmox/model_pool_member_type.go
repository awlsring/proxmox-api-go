/*
Proxmox

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2023-01-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package proxmox

import (
	"encoding/json"
	"fmt"
)

// PoolMemberType the model 'PoolMemberType'
type PoolMemberType string

// List of PoolMemberType
const (
	POOLMEMBERTYPE_QEMU PoolMemberType = "qemu"
	POOLMEMBERTYPE_LXC PoolMemberType = "lxc"
	POOLMEMBERTYPE_STORAGE PoolMemberType = "storage"
)

// All allowed values of PoolMemberType enum
var AllowedPoolMemberTypeEnumValues = []PoolMemberType{
	"qemu",
	"lxc",
	"storage",
}

func (v *PoolMemberType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PoolMemberType(value)
	for _, existing := range AllowedPoolMemberTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PoolMemberType", value)
}

// NewPoolMemberTypeFromValue returns a pointer to a valid PoolMemberType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPoolMemberTypeFromValue(v string) (*PoolMemberType, error) {
	ev := PoolMemberType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PoolMemberType: valid values are %v", v, AllowedPoolMemberTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PoolMemberType) IsValid() bool {
	for _, existing := range AllowedPoolMemberTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PoolMemberType value
func (v PoolMemberType) Ptr() *PoolMemberType {
	return &v
}

type NullablePoolMemberType struct {
	value *PoolMemberType
	isSet bool
}

func (v NullablePoolMemberType) Get() *PoolMemberType {
	return v.value
}

func (v *NullablePoolMemberType) Set(val *PoolMemberType) {
	v.value = val
	v.isSet = true
}

func (v NullablePoolMemberType) IsSet() bool {
	return v.isSet
}

func (v *NullablePoolMemberType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePoolMemberType(val *PoolMemberType) *NullablePoolMemberType {
	return &NullablePoolMemberType{value: val, isSet: true}
}

func (v NullablePoolMemberType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePoolMemberType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

