/*
Proxmox

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2023-01-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package proxmox

import (
	"encoding/json"
)

// checks if the CommandSummary type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommandSummary{}

// CommandSummary struct for CommandSummary
type CommandSummary struct {
	Name string `json:"name"`
	Enabled bool `json:"enabled"`
	SuccessResponse bool `json:"success-response"`
}

// NewCommandSummary instantiates a new CommandSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommandSummary(name string, enabled bool, successResponse bool) *CommandSummary {
	this := CommandSummary{}
	this.Name = name
	this.Enabled = enabled
	this.SuccessResponse = successResponse
	return &this
}

// NewCommandSummaryWithDefaults instantiates a new CommandSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommandSummaryWithDefaults() *CommandSummary {
	this := CommandSummary{}
	return &this
}

// GetName returns the Name field value
func (o *CommandSummary) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CommandSummary) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CommandSummary) SetName(v string) {
	o.Name = v
}

// GetEnabled returns the Enabled field value
func (o *CommandSummary) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *CommandSummary) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *CommandSummary) SetEnabled(v bool) {
	o.Enabled = v
}

// GetSuccessResponse returns the SuccessResponse field value
func (o *CommandSummary) GetSuccessResponse() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.SuccessResponse
}

// GetSuccessResponseOk returns a tuple with the SuccessResponse field value
// and a boolean to check if the value has been set.
func (o *CommandSummary) GetSuccessResponseOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SuccessResponse, true
}

// SetSuccessResponse sets field value
func (o *CommandSummary) SetSuccessResponse(v bool) {
	o.SuccessResponse = v
}

func (o CommandSummary) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommandSummary) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["enabled"] = o.Enabled
	toSerialize["success-response"] = o.SuccessResponse
	return toSerialize, nil
}

type NullableCommandSummary struct {
	value *CommandSummary
	isSet bool
}

func (v NullableCommandSummary) Get() *CommandSummary {
	return v.value
}

func (v *NullableCommandSummary) Set(val *CommandSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableCommandSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableCommandSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommandSummary(val *CommandSummary) *NullableCommandSummary {
	return &NullableCommandSummary{value: val, isSet: true}
}

func (v NullableCommandSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommandSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


