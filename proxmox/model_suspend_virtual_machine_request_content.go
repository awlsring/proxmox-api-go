/*
Proxmox

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2023-01-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package proxmox

import (
	"encoding/json"
)

// checks if the SuspendVirtualMachineRequestContent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SuspendVirtualMachineRequestContent{}

// SuspendVirtualMachineRequestContent struct for SuspendVirtualMachineRequestContent
type SuspendVirtualMachineRequestContent struct {
	// An integer used to represent a boolean. 0 is false, 1 is true.
	Skiplock *float32 `json:"skiplock,omitempty"`
	// An integer used to represent a boolean. 0 is false, 1 is true.
	Statestorage *float32 `json:"statestorage,omitempty"`
	// An integer used to represent a boolean. 0 is false, 1 is true.
	Todisk *float32 `json:"todisk,omitempty"`
}

// NewSuspendVirtualMachineRequestContent instantiates a new SuspendVirtualMachineRequestContent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSuspendVirtualMachineRequestContent() *SuspendVirtualMachineRequestContent {
	this := SuspendVirtualMachineRequestContent{}
	return &this
}

// NewSuspendVirtualMachineRequestContentWithDefaults instantiates a new SuspendVirtualMachineRequestContent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSuspendVirtualMachineRequestContentWithDefaults() *SuspendVirtualMachineRequestContent {
	this := SuspendVirtualMachineRequestContent{}
	return &this
}

// GetSkiplock returns the Skiplock field value if set, zero value otherwise.
func (o *SuspendVirtualMachineRequestContent) GetSkiplock() float32 {
	if o == nil || IsNil(o.Skiplock) {
		var ret float32
		return ret
	}
	return *o.Skiplock
}

// GetSkiplockOk returns a tuple with the Skiplock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuspendVirtualMachineRequestContent) GetSkiplockOk() (*float32, bool) {
	if o == nil || IsNil(o.Skiplock) {
		return nil, false
	}
	return o.Skiplock, true
}

// HasSkiplock returns a boolean if a field has been set.
func (o *SuspendVirtualMachineRequestContent) HasSkiplock() bool {
	if o != nil && !IsNil(o.Skiplock) {
		return true
	}

	return false
}

// SetSkiplock gets a reference to the given float32 and assigns it to the Skiplock field.
func (o *SuspendVirtualMachineRequestContent) SetSkiplock(v float32) {
	o.Skiplock = &v
}

// GetStatestorage returns the Statestorage field value if set, zero value otherwise.
func (o *SuspendVirtualMachineRequestContent) GetStatestorage() float32 {
	if o == nil || IsNil(o.Statestorage) {
		var ret float32
		return ret
	}
	return *o.Statestorage
}

// GetStatestorageOk returns a tuple with the Statestorage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuspendVirtualMachineRequestContent) GetStatestorageOk() (*float32, bool) {
	if o == nil || IsNil(o.Statestorage) {
		return nil, false
	}
	return o.Statestorage, true
}

// HasStatestorage returns a boolean if a field has been set.
func (o *SuspendVirtualMachineRequestContent) HasStatestorage() bool {
	if o != nil && !IsNil(o.Statestorage) {
		return true
	}

	return false
}

// SetStatestorage gets a reference to the given float32 and assigns it to the Statestorage field.
func (o *SuspendVirtualMachineRequestContent) SetStatestorage(v float32) {
	o.Statestorage = &v
}

// GetTodisk returns the Todisk field value if set, zero value otherwise.
func (o *SuspendVirtualMachineRequestContent) GetTodisk() float32 {
	if o == nil || IsNil(o.Todisk) {
		var ret float32
		return ret
	}
	return *o.Todisk
}

// GetTodiskOk returns a tuple with the Todisk field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuspendVirtualMachineRequestContent) GetTodiskOk() (*float32, bool) {
	if o == nil || IsNil(o.Todisk) {
		return nil, false
	}
	return o.Todisk, true
}

// HasTodisk returns a boolean if a field has been set.
func (o *SuspendVirtualMachineRequestContent) HasTodisk() bool {
	if o != nil && !IsNil(o.Todisk) {
		return true
	}

	return false
}

// SetTodisk gets a reference to the given float32 and assigns it to the Todisk field.
func (o *SuspendVirtualMachineRequestContent) SetTodisk(v float32) {
	o.Todisk = &v
}

func (o SuspendVirtualMachineRequestContent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SuspendVirtualMachineRequestContent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Skiplock) {
		toSerialize["skiplock"] = o.Skiplock
	}
	if !IsNil(o.Statestorage) {
		toSerialize["statestorage"] = o.Statestorage
	}
	if !IsNil(o.Todisk) {
		toSerialize["todisk"] = o.Todisk
	}
	return toSerialize, nil
}

type NullableSuspendVirtualMachineRequestContent struct {
	value *SuspendVirtualMachineRequestContent
	isSet bool
}

func (v NullableSuspendVirtualMachineRequestContent) Get() *SuspendVirtualMachineRequestContent {
	return v.value
}

func (v *NullableSuspendVirtualMachineRequestContent) Set(val *SuspendVirtualMachineRequestContent) {
	v.value = val
	v.isSet = true
}

func (v NullableSuspendVirtualMachineRequestContent) IsSet() bool {
	return v.isSet
}

func (v *NullableSuspendVirtualMachineRequestContent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSuspendVirtualMachineRequestContent(val *SuspendVirtualMachineRequestContent) *NullableSuspendVirtualMachineRequestContent {
	return &NullableSuspendVirtualMachineRequestContent{value: val, isSet: true}
}

func (v NullableSuspendVirtualMachineRequestContent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSuspendVirtualMachineRequestContent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


