/*
Proxmox

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2023-01-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package proxmox

import (
	"encoding/json"
)

// checks if the NodeStorageSummary type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NodeStorageSummary{}

// NodeStorageSummary struct for NodeStorageSummary
type NodeStorageSummary struct {
	Storage string `json:"storage"`
	Type StorageType `json:"type"`
	// The allowed storage content types.
	Content string `json:"content"`
	// An integer used to represent a boolean. 0 is false, 1 is true.
	Active *float32 `json:"active,omitempty"`
	// An integer used to represent a boolean. 0 is false, 1 is true.
	Enabled *float32 `json:"enabled,omitempty"`
	// Whether the storage is shared across all nodes.
	Shared *float32 `json:"shared,omitempty"`
	Total *float32 `json:"total,omitempty"`
	Used *float32 `json:"used,omitempty"`
	UsedFraction *float32 `json:"used_fraction,omitempty"`
	Avail *float32 `json:"avail,omitempty"`
}

// NewNodeStorageSummary instantiates a new NodeStorageSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNodeStorageSummary(storage string, type_ StorageType, content string) *NodeStorageSummary {
	this := NodeStorageSummary{}
	this.Storage = storage
	this.Type = type_
	this.Content = content
	return &this
}

// NewNodeStorageSummaryWithDefaults instantiates a new NodeStorageSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNodeStorageSummaryWithDefaults() *NodeStorageSummary {
	this := NodeStorageSummary{}
	return &this
}

// GetStorage returns the Storage field value
func (o *NodeStorageSummary) GetStorage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Storage
}

// GetStorageOk returns a tuple with the Storage field value
// and a boolean to check if the value has been set.
func (o *NodeStorageSummary) GetStorageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Storage, true
}

// SetStorage sets field value
func (o *NodeStorageSummary) SetStorage(v string) {
	o.Storage = v
}

// GetType returns the Type field value
func (o *NodeStorageSummary) GetType() StorageType {
	if o == nil {
		var ret StorageType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *NodeStorageSummary) GetTypeOk() (*StorageType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *NodeStorageSummary) SetType(v StorageType) {
	o.Type = v
}

// GetContent returns the Content field value
func (o *NodeStorageSummary) GetContent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Content
}

// GetContentOk returns a tuple with the Content field value
// and a boolean to check if the value has been set.
func (o *NodeStorageSummary) GetContentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Content, true
}

// SetContent sets field value
func (o *NodeStorageSummary) SetContent(v string) {
	o.Content = v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *NodeStorageSummary) GetActive() float32 {
	if o == nil || IsNil(o.Active) {
		var ret float32
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeStorageSummary) GetActiveOk() (*float32, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *NodeStorageSummary) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given float32 and assigns it to the Active field.
func (o *NodeStorageSummary) SetActive(v float32) {
	o.Active = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *NodeStorageSummary) GetEnabled() float32 {
	if o == nil || IsNil(o.Enabled) {
		var ret float32
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeStorageSummary) GetEnabledOk() (*float32, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *NodeStorageSummary) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given float32 and assigns it to the Enabled field.
func (o *NodeStorageSummary) SetEnabled(v float32) {
	o.Enabled = &v
}

// GetShared returns the Shared field value if set, zero value otherwise.
func (o *NodeStorageSummary) GetShared() float32 {
	if o == nil || IsNil(o.Shared) {
		var ret float32
		return ret
	}
	return *o.Shared
}

// GetSharedOk returns a tuple with the Shared field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeStorageSummary) GetSharedOk() (*float32, bool) {
	if o == nil || IsNil(o.Shared) {
		return nil, false
	}
	return o.Shared, true
}

// HasShared returns a boolean if a field has been set.
func (o *NodeStorageSummary) HasShared() bool {
	if o != nil && !IsNil(o.Shared) {
		return true
	}

	return false
}

// SetShared gets a reference to the given float32 and assigns it to the Shared field.
func (o *NodeStorageSummary) SetShared(v float32) {
	o.Shared = &v
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *NodeStorageSummary) GetTotal() float32 {
	if o == nil || IsNil(o.Total) {
		var ret float32
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeStorageSummary) GetTotalOk() (*float32, bool) {
	if o == nil || IsNil(o.Total) {
		return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *NodeStorageSummary) HasTotal() bool {
	if o != nil && !IsNil(o.Total) {
		return true
	}

	return false
}

// SetTotal gets a reference to the given float32 and assigns it to the Total field.
func (o *NodeStorageSummary) SetTotal(v float32) {
	o.Total = &v
}

// GetUsed returns the Used field value if set, zero value otherwise.
func (o *NodeStorageSummary) GetUsed() float32 {
	if o == nil || IsNil(o.Used) {
		var ret float32
		return ret
	}
	return *o.Used
}

// GetUsedOk returns a tuple with the Used field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeStorageSummary) GetUsedOk() (*float32, bool) {
	if o == nil || IsNil(o.Used) {
		return nil, false
	}
	return o.Used, true
}

// HasUsed returns a boolean if a field has been set.
func (o *NodeStorageSummary) HasUsed() bool {
	if o != nil && !IsNil(o.Used) {
		return true
	}

	return false
}

// SetUsed gets a reference to the given float32 and assigns it to the Used field.
func (o *NodeStorageSummary) SetUsed(v float32) {
	o.Used = &v
}

// GetUsedFraction returns the UsedFraction field value if set, zero value otherwise.
func (o *NodeStorageSummary) GetUsedFraction() float32 {
	if o == nil || IsNil(o.UsedFraction) {
		var ret float32
		return ret
	}
	return *o.UsedFraction
}

// GetUsedFractionOk returns a tuple with the UsedFraction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeStorageSummary) GetUsedFractionOk() (*float32, bool) {
	if o == nil || IsNil(o.UsedFraction) {
		return nil, false
	}
	return o.UsedFraction, true
}

// HasUsedFraction returns a boolean if a field has been set.
func (o *NodeStorageSummary) HasUsedFraction() bool {
	if o != nil && !IsNil(o.UsedFraction) {
		return true
	}

	return false
}

// SetUsedFraction gets a reference to the given float32 and assigns it to the UsedFraction field.
func (o *NodeStorageSummary) SetUsedFraction(v float32) {
	o.UsedFraction = &v
}

// GetAvail returns the Avail field value if set, zero value otherwise.
func (o *NodeStorageSummary) GetAvail() float32 {
	if o == nil || IsNil(o.Avail) {
		var ret float32
		return ret
	}
	return *o.Avail
}

// GetAvailOk returns a tuple with the Avail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeStorageSummary) GetAvailOk() (*float32, bool) {
	if o == nil || IsNil(o.Avail) {
		return nil, false
	}
	return o.Avail, true
}

// HasAvail returns a boolean if a field has been set.
func (o *NodeStorageSummary) HasAvail() bool {
	if o != nil && !IsNil(o.Avail) {
		return true
	}

	return false
}

// SetAvail gets a reference to the given float32 and assigns it to the Avail field.
func (o *NodeStorageSummary) SetAvail(v float32) {
	o.Avail = &v
}

func (o NodeStorageSummary) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NodeStorageSummary) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["storage"] = o.Storage
	toSerialize["type"] = o.Type
	toSerialize["content"] = o.Content
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.Shared) {
		toSerialize["shared"] = o.Shared
	}
	if !IsNil(o.Total) {
		toSerialize["total"] = o.Total
	}
	if !IsNil(o.Used) {
		toSerialize["used"] = o.Used
	}
	if !IsNil(o.UsedFraction) {
		toSerialize["used_fraction"] = o.UsedFraction
	}
	if !IsNil(o.Avail) {
		toSerialize["avail"] = o.Avail
	}
	return toSerialize, nil
}

type NullableNodeStorageSummary struct {
	value *NodeStorageSummary
	isSet bool
}

func (v NullableNodeStorageSummary) Get() *NodeStorageSummary {
	return v.value
}

func (v *NullableNodeStorageSummary) Set(val *NodeStorageSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableNodeStorageSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableNodeStorageSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNodeStorageSummary(val *NodeStorageSummary) *NullableNodeStorageSummary {
	return &NullableNodeStorageSummary{value: val, isSet: true}
}

func (v NullableNodeStorageSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNodeStorageSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


