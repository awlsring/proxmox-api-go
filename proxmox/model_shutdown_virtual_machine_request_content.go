/*
Proxmox

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2023-01-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package proxmox

import (
	"encoding/json"
)

// checks if the ShutdownVirtualMachineRequestContent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ShutdownVirtualMachineRequestContent{}

// ShutdownVirtualMachineRequestContent struct for ShutdownVirtualMachineRequestContent
type ShutdownVirtualMachineRequestContent struct {
	Timeout *float32 `json:"timeout,omitempty"`
	// An integer used to represent a boolean. 0 is false, 1 is true.
	Skiplock *float32 `json:"skiplock,omitempty"`
	// Ensure the virtual machine stops.
	ForeStop *float32 `json:"foreStop,omitempty"`
	// Keep the storage active after Shutdownping it.
	KeepActive *float32 `json:"keepActive,omitempty"`
}

// NewShutdownVirtualMachineRequestContent instantiates a new ShutdownVirtualMachineRequestContent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewShutdownVirtualMachineRequestContent() *ShutdownVirtualMachineRequestContent {
	this := ShutdownVirtualMachineRequestContent{}
	return &this
}

// NewShutdownVirtualMachineRequestContentWithDefaults instantiates a new ShutdownVirtualMachineRequestContent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewShutdownVirtualMachineRequestContentWithDefaults() *ShutdownVirtualMachineRequestContent {
	this := ShutdownVirtualMachineRequestContent{}
	return &this
}

// GetTimeout returns the Timeout field value if set, zero value otherwise.
func (o *ShutdownVirtualMachineRequestContent) GetTimeout() float32 {
	if o == nil || IsNil(o.Timeout) {
		var ret float32
		return ret
	}
	return *o.Timeout
}

// GetTimeoutOk returns a tuple with the Timeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShutdownVirtualMachineRequestContent) GetTimeoutOk() (*float32, bool) {
	if o == nil || IsNil(o.Timeout) {
		return nil, false
	}
	return o.Timeout, true
}

// HasTimeout returns a boolean if a field has been set.
func (o *ShutdownVirtualMachineRequestContent) HasTimeout() bool {
	if o != nil && !IsNil(o.Timeout) {
		return true
	}

	return false
}

// SetTimeout gets a reference to the given float32 and assigns it to the Timeout field.
func (o *ShutdownVirtualMachineRequestContent) SetTimeout(v float32) {
	o.Timeout = &v
}

// GetSkiplock returns the Skiplock field value if set, zero value otherwise.
func (o *ShutdownVirtualMachineRequestContent) GetSkiplock() float32 {
	if o == nil || IsNil(o.Skiplock) {
		var ret float32
		return ret
	}
	return *o.Skiplock
}

// GetSkiplockOk returns a tuple with the Skiplock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShutdownVirtualMachineRequestContent) GetSkiplockOk() (*float32, bool) {
	if o == nil || IsNil(o.Skiplock) {
		return nil, false
	}
	return o.Skiplock, true
}

// HasSkiplock returns a boolean if a field has been set.
func (o *ShutdownVirtualMachineRequestContent) HasSkiplock() bool {
	if o != nil && !IsNil(o.Skiplock) {
		return true
	}

	return false
}

// SetSkiplock gets a reference to the given float32 and assigns it to the Skiplock field.
func (o *ShutdownVirtualMachineRequestContent) SetSkiplock(v float32) {
	o.Skiplock = &v
}

// GetForeStop returns the ForeStop field value if set, zero value otherwise.
func (o *ShutdownVirtualMachineRequestContent) GetForeStop() float32 {
	if o == nil || IsNil(o.ForeStop) {
		var ret float32
		return ret
	}
	return *o.ForeStop
}

// GetForeStopOk returns a tuple with the ForeStop field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShutdownVirtualMachineRequestContent) GetForeStopOk() (*float32, bool) {
	if o == nil || IsNil(o.ForeStop) {
		return nil, false
	}
	return o.ForeStop, true
}

// HasForeStop returns a boolean if a field has been set.
func (o *ShutdownVirtualMachineRequestContent) HasForeStop() bool {
	if o != nil && !IsNil(o.ForeStop) {
		return true
	}

	return false
}

// SetForeStop gets a reference to the given float32 and assigns it to the ForeStop field.
func (o *ShutdownVirtualMachineRequestContent) SetForeStop(v float32) {
	o.ForeStop = &v
}

// GetKeepActive returns the KeepActive field value if set, zero value otherwise.
func (o *ShutdownVirtualMachineRequestContent) GetKeepActive() float32 {
	if o == nil || IsNil(o.KeepActive) {
		var ret float32
		return ret
	}
	return *o.KeepActive
}

// GetKeepActiveOk returns a tuple with the KeepActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShutdownVirtualMachineRequestContent) GetKeepActiveOk() (*float32, bool) {
	if o == nil || IsNil(o.KeepActive) {
		return nil, false
	}
	return o.KeepActive, true
}

// HasKeepActive returns a boolean if a field has been set.
func (o *ShutdownVirtualMachineRequestContent) HasKeepActive() bool {
	if o != nil && !IsNil(o.KeepActive) {
		return true
	}

	return false
}

// SetKeepActive gets a reference to the given float32 and assigns it to the KeepActive field.
func (o *ShutdownVirtualMachineRequestContent) SetKeepActive(v float32) {
	o.KeepActive = &v
}

func (o ShutdownVirtualMachineRequestContent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ShutdownVirtualMachineRequestContent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Timeout) {
		toSerialize["timeout"] = o.Timeout
	}
	if !IsNil(o.Skiplock) {
		toSerialize["skiplock"] = o.Skiplock
	}
	if !IsNil(o.ForeStop) {
		toSerialize["foreStop"] = o.ForeStop
	}
	if !IsNil(o.KeepActive) {
		toSerialize["keepActive"] = o.KeepActive
	}
	return toSerialize, nil
}

type NullableShutdownVirtualMachineRequestContent struct {
	value *ShutdownVirtualMachineRequestContent
	isSet bool
}

func (v NullableShutdownVirtualMachineRequestContent) Get() *ShutdownVirtualMachineRequestContent {
	return v.value
}

func (v *NullableShutdownVirtualMachineRequestContent) Set(val *ShutdownVirtualMachineRequestContent) {
	v.value = val
	v.isSet = true
}

func (v NullableShutdownVirtualMachineRequestContent) IsSet() bool {
	return v.isSet
}

func (v *NullableShutdownVirtualMachineRequestContent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableShutdownVirtualMachineRequestContent(val *ShutdownVirtualMachineRequestContent) *NullableShutdownVirtualMachineRequestContent {
	return &NullableShutdownVirtualMachineRequestContent{value: val, isSet: true}
}

func (v NullableShutdownVirtualMachineRequestContent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableShutdownVirtualMachineRequestContent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


