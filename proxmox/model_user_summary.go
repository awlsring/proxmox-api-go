/*
Proxmox

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2023-01-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package proxmox

import (
	"encoding/json"
)

// checks if the UserSummary type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserSummary{}

// UserSummary struct for UserSummary
type UserSummary struct {
	Userid string `json:"userid"`
	Email *string `json:"email,omitempty"`
	Firstname *string `json:"firstname,omitempty"`
	Lastname *string `json:"lastname,omitempty"`
	// An integer used to represent a boolean. 0 is false, 1 is true.
	Enable *float32 `json:"enable,omitempty"`
	Comment *string `json:"comment,omitempty"`
	Groups *string `json:"groups,omitempty"`
	Expire *float32 `json:"expire,omitempty"`
	RealmType *string `json:"realm-type,omitempty"`
	Tokens []UserTokenSummary `json:"tokens,omitempty"`
}

// NewUserSummary instantiates a new UserSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserSummary(userid string) *UserSummary {
	this := UserSummary{}
	this.Userid = userid
	return &this
}

// NewUserSummaryWithDefaults instantiates a new UserSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserSummaryWithDefaults() *UserSummary {
	this := UserSummary{}
	return &this
}

// GetUserid returns the Userid field value
func (o *UserSummary) GetUserid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Userid
}

// GetUseridOk returns a tuple with the Userid field value
// and a boolean to check if the value has been set.
func (o *UserSummary) GetUseridOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Userid, true
}

// SetUserid sets field value
func (o *UserSummary) SetUserid(v string) {
	o.Userid = v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *UserSummary) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSummary) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *UserSummary) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *UserSummary) SetEmail(v string) {
	o.Email = &v
}

// GetFirstname returns the Firstname field value if set, zero value otherwise.
func (o *UserSummary) GetFirstname() string {
	if o == nil || IsNil(o.Firstname) {
		var ret string
		return ret
	}
	return *o.Firstname
}

// GetFirstnameOk returns a tuple with the Firstname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSummary) GetFirstnameOk() (*string, bool) {
	if o == nil || IsNil(o.Firstname) {
		return nil, false
	}
	return o.Firstname, true
}

// HasFirstname returns a boolean if a field has been set.
func (o *UserSummary) HasFirstname() bool {
	if o != nil && !IsNil(o.Firstname) {
		return true
	}

	return false
}

// SetFirstname gets a reference to the given string and assigns it to the Firstname field.
func (o *UserSummary) SetFirstname(v string) {
	o.Firstname = &v
}

// GetLastname returns the Lastname field value if set, zero value otherwise.
func (o *UserSummary) GetLastname() string {
	if o == nil || IsNil(o.Lastname) {
		var ret string
		return ret
	}
	return *o.Lastname
}

// GetLastnameOk returns a tuple with the Lastname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSummary) GetLastnameOk() (*string, bool) {
	if o == nil || IsNil(o.Lastname) {
		return nil, false
	}
	return o.Lastname, true
}

// HasLastname returns a boolean if a field has been set.
func (o *UserSummary) HasLastname() bool {
	if o != nil && !IsNil(o.Lastname) {
		return true
	}

	return false
}

// SetLastname gets a reference to the given string and assigns it to the Lastname field.
func (o *UserSummary) SetLastname(v string) {
	o.Lastname = &v
}

// GetEnable returns the Enable field value if set, zero value otherwise.
func (o *UserSummary) GetEnable() float32 {
	if o == nil || IsNil(o.Enable) {
		var ret float32
		return ret
	}
	return *o.Enable
}

// GetEnableOk returns a tuple with the Enable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSummary) GetEnableOk() (*float32, bool) {
	if o == nil || IsNil(o.Enable) {
		return nil, false
	}
	return o.Enable, true
}

// HasEnable returns a boolean if a field has been set.
func (o *UserSummary) HasEnable() bool {
	if o != nil && !IsNil(o.Enable) {
		return true
	}

	return false
}

// SetEnable gets a reference to the given float32 and assigns it to the Enable field.
func (o *UserSummary) SetEnable(v float32) {
	o.Enable = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *UserSummary) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSummary) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *UserSummary) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *UserSummary) SetComment(v string) {
	o.Comment = &v
}

// GetGroups returns the Groups field value if set, zero value otherwise.
func (o *UserSummary) GetGroups() string {
	if o == nil || IsNil(o.Groups) {
		var ret string
		return ret
	}
	return *o.Groups
}

// GetGroupsOk returns a tuple with the Groups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSummary) GetGroupsOk() (*string, bool) {
	if o == nil || IsNil(o.Groups) {
		return nil, false
	}
	return o.Groups, true
}

// HasGroups returns a boolean if a field has been set.
func (o *UserSummary) HasGroups() bool {
	if o != nil && !IsNil(o.Groups) {
		return true
	}

	return false
}

// SetGroups gets a reference to the given string and assigns it to the Groups field.
func (o *UserSummary) SetGroups(v string) {
	o.Groups = &v
}

// GetExpire returns the Expire field value if set, zero value otherwise.
func (o *UserSummary) GetExpire() float32 {
	if o == nil || IsNil(o.Expire) {
		var ret float32
		return ret
	}
	return *o.Expire
}

// GetExpireOk returns a tuple with the Expire field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSummary) GetExpireOk() (*float32, bool) {
	if o == nil || IsNil(o.Expire) {
		return nil, false
	}
	return o.Expire, true
}

// HasExpire returns a boolean if a field has been set.
func (o *UserSummary) HasExpire() bool {
	if o != nil && !IsNil(o.Expire) {
		return true
	}

	return false
}

// SetExpire gets a reference to the given float32 and assigns it to the Expire field.
func (o *UserSummary) SetExpire(v float32) {
	o.Expire = &v
}

// GetRealmType returns the RealmType field value if set, zero value otherwise.
func (o *UserSummary) GetRealmType() string {
	if o == nil || IsNil(o.RealmType) {
		var ret string
		return ret
	}
	return *o.RealmType
}

// GetRealmTypeOk returns a tuple with the RealmType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSummary) GetRealmTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RealmType) {
		return nil, false
	}
	return o.RealmType, true
}

// HasRealmType returns a boolean if a field has been set.
func (o *UserSummary) HasRealmType() bool {
	if o != nil && !IsNil(o.RealmType) {
		return true
	}

	return false
}

// SetRealmType gets a reference to the given string and assigns it to the RealmType field.
func (o *UserSummary) SetRealmType(v string) {
	o.RealmType = &v
}

// GetTokens returns the Tokens field value if set, zero value otherwise.
func (o *UserSummary) GetTokens() []UserTokenSummary {
	if o == nil || IsNil(o.Tokens) {
		var ret []UserTokenSummary
		return ret
	}
	return o.Tokens
}

// GetTokensOk returns a tuple with the Tokens field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSummary) GetTokensOk() ([]UserTokenSummary, bool) {
	if o == nil || IsNil(o.Tokens) {
		return nil, false
	}
	return o.Tokens, true
}

// HasTokens returns a boolean if a field has been set.
func (o *UserSummary) HasTokens() bool {
	if o != nil && !IsNil(o.Tokens) {
		return true
	}

	return false
}

// SetTokens gets a reference to the given []UserTokenSummary and assigns it to the Tokens field.
func (o *UserSummary) SetTokens(v []UserTokenSummary) {
	o.Tokens = v
}

func (o UserSummary) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserSummary) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["userid"] = o.Userid
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.Firstname) {
		toSerialize["firstname"] = o.Firstname
	}
	if !IsNil(o.Lastname) {
		toSerialize["lastname"] = o.Lastname
	}
	if !IsNil(o.Enable) {
		toSerialize["enable"] = o.Enable
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.Groups) {
		toSerialize["groups"] = o.Groups
	}
	if !IsNil(o.Expire) {
		toSerialize["expire"] = o.Expire
	}
	if !IsNil(o.RealmType) {
		toSerialize["realm-type"] = o.RealmType
	}
	if !IsNil(o.Tokens) {
		toSerialize["tokens"] = o.Tokens
	}
	return toSerialize, nil
}

type NullableUserSummary struct {
	value *UserSummary
	isSet bool
}

func (v NullableUserSummary) Get() *UserSummary {
	return v.value
}

func (v *NullableUserSummary) Set(val *UserSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableUserSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableUserSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserSummary(val *UserSummary) *NullableUserSummary {
	return &NullableUserSummary{value: val, isSet: true}
}

func (v NullableUserSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


