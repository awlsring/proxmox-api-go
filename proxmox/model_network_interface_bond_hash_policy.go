/*
Proxmox

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2023-01-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package proxmox

import (
	"encoding/json"
	"fmt"
)

// NetworkInterfaceBondHashPolicy the model 'NetworkInterfaceBondHashPolicy'
type NetworkInterfaceBondHashPolicy string

// List of NetworkInterfaceBondHashPolicy
const (
	NETWORKINTERFACEBONDHASHPOLICY_LAYER2 NetworkInterfaceBondHashPolicy = "layer2"
	NETWORKINTERFACEBONDHASHPOLICY_LAYER23 NetworkInterfaceBondHashPolicy = "layer2+3"
	NETWORKINTERFACEBONDHASHPOLICY_LAYER34 NetworkInterfaceBondHashPolicy = "layer3+4"
)

// All allowed values of NetworkInterfaceBondHashPolicy enum
var AllowedNetworkInterfaceBondHashPolicyEnumValues = []NetworkInterfaceBondHashPolicy{
	"layer2",
	"layer2+3",
	"layer3+4",
}

func (v *NetworkInterfaceBondHashPolicy) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := NetworkInterfaceBondHashPolicy(value)
	for _, existing := range AllowedNetworkInterfaceBondHashPolicyEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid NetworkInterfaceBondHashPolicy", value)
}

// NewNetworkInterfaceBondHashPolicyFromValue returns a pointer to a valid NetworkInterfaceBondHashPolicy
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewNetworkInterfaceBondHashPolicyFromValue(v string) (*NetworkInterfaceBondHashPolicy, error) {
	ev := NetworkInterfaceBondHashPolicy(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for NetworkInterfaceBondHashPolicy: valid values are %v", v, AllowedNetworkInterfaceBondHashPolicyEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v NetworkInterfaceBondHashPolicy) IsValid() bool {
	for _, existing := range AllowedNetworkInterfaceBondHashPolicyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to NetworkInterfaceBondHashPolicy value
func (v NetworkInterfaceBondHashPolicy) Ptr() *NetworkInterfaceBondHashPolicy {
	return &v
}

type NullableNetworkInterfaceBondHashPolicy struct {
	value *NetworkInterfaceBondHashPolicy
	isSet bool
}

func (v NullableNetworkInterfaceBondHashPolicy) Get() *NetworkInterfaceBondHashPolicy {
	return v.value
}

func (v *NullableNetworkInterfaceBondHashPolicy) Set(val *NetworkInterfaceBondHashPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkInterfaceBondHashPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkInterfaceBondHashPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkInterfaceBondHashPolicy(val *NetworkInterfaceBondHashPolicy) *NullableNetworkInterfaceBondHashPolicy {
	return &NullableNetworkInterfaceBondHashPolicy{value: val, isSet: true}
}

func (v NullableNetworkInterfaceBondHashPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkInterfaceBondHashPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

