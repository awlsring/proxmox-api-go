/*
Proxmox

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2023-01-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package proxmox

import (
	"encoding/json"
	"fmt"
)

// ChecksumAlgorithm the model 'ChecksumAlgorithm'
type ChecksumAlgorithm string

// List of ChecksumAlgorithm
const (
	CHECKSUMALGORITHM_MD5 ChecksumAlgorithm = "md5"
	CHECKSUMALGORITHM_SHA1 ChecksumAlgorithm = "sha1"
	CHECKSUMALGORITHM_SHA224 ChecksumAlgorithm = "sha224"
	CHECKSUMALGORITHM_SHA256 ChecksumAlgorithm = "sha256"
	CHECKSUMALGORITHM_SHA384 ChecksumAlgorithm = "sha384"
	CHECKSUMALGORITHM_SHA512 ChecksumAlgorithm = "sha512"
)

// All allowed values of ChecksumAlgorithm enum
var AllowedChecksumAlgorithmEnumValues = []ChecksumAlgorithm{
	"md5",
	"sha1",
	"sha224",
	"sha256",
	"sha384",
	"sha512",
}

func (v *ChecksumAlgorithm) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ChecksumAlgorithm(value)
	for _, existing := range AllowedChecksumAlgorithmEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ChecksumAlgorithm", value)
}

// NewChecksumAlgorithmFromValue returns a pointer to a valid ChecksumAlgorithm
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewChecksumAlgorithmFromValue(v string) (*ChecksumAlgorithm, error) {
	ev := ChecksumAlgorithm(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ChecksumAlgorithm: valid values are %v", v, AllowedChecksumAlgorithmEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ChecksumAlgorithm) IsValid() bool {
	for _, existing := range AllowedChecksumAlgorithmEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ChecksumAlgorithm value
func (v ChecksumAlgorithm) Ptr() *ChecksumAlgorithm {
	return &v
}

type NullableChecksumAlgorithm struct {
	value *ChecksumAlgorithm
	isSet bool
}

func (v NullableChecksumAlgorithm) Get() *ChecksumAlgorithm {
	return v.value
}

func (v *NullableChecksumAlgorithm) Set(val *ChecksumAlgorithm) {
	v.value = val
	v.isSet = true
}

func (v NullableChecksumAlgorithm) IsSet() bool {
	return v.isSet
}

func (v *NullableChecksumAlgorithm) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChecksumAlgorithm(val *ChecksumAlgorithm) *NullableChecksumAlgorithm {
	return &NullableChecksumAlgorithm{value: val, isSet: true}
}

func (v NullableChecksumAlgorithm) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChecksumAlgorithm) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

