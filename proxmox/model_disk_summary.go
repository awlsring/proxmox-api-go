/*
Proxmox

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2023-01-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package proxmox

import (
	"encoding/json"
)

// checks if the DiskSummary type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DiskSummary{}

// DiskSummary struct for DiskSummary
type DiskSummary struct {
	Devpath string `json:"devpath"`
	Gpt float32 `json:"gpt"`
	Osdid float32 `json:"osdid"`
	// The size of the disk in bytes
	Size float32 `json:"size"`
	ByIdLink *string `json:"by_id_link,omitempty"`
	Model *string `json:"model,omitempty"`
	Parent *string `json:"parent,omitempty"`
	Health *string `json:"health,omitempty"`
	Serial *string `json:"serial,omitempty"`
	Rpm interface{} `json:"rpm,omitempty"`
	Wwn *string `json:"wwn,omitempty"`
	Vendor *string `json:"vendor,omitempty"`
	Wearout interface{} `json:"wearout,omitempty"`
	Type *DiskType `json:"type,omitempty"`
	Mounted *float32 `json:"mounted,omitempty"`
}

// NewDiskSummary instantiates a new DiskSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDiskSummary(devpath string, gpt float32, osdid float32, size float32) *DiskSummary {
	this := DiskSummary{}
	this.Devpath = devpath
	this.Gpt = gpt
	this.Osdid = osdid
	this.Size = size
	return &this
}

// NewDiskSummaryWithDefaults instantiates a new DiskSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDiskSummaryWithDefaults() *DiskSummary {
	this := DiskSummary{}
	return &this
}

// GetDevpath returns the Devpath field value
func (o *DiskSummary) GetDevpath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Devpath
}

// GetDevpathOk returns a tuple with the Devpath field value
// and a boolean to check if the value has been set.
func (o *DiskSummary) GetDevpathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Devpath, true
}

// SetDevpath sets field value
func (o *DiskSummary) SetDevpath(v string) {
	o.Devpath = v
}

// GetGpt returns the Gpt field value
func (o *DiskSummary) GetGpt() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Gpt
}

// GetGptOk returns a tuple with the Gpt field value
// and a boolean to check if the value has been set.
func (o *DiskSummary) GetGptOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Gpt, true
}

// SetGpt sets field value
func (o *DiskSummary) SetGpt(v float32) {
	o.Gpt = v
}

// GetOsdid returns the Osdid field value
func (o *DiskSummary) GetOsdid() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Osdid
}

// GetOsdidOk returns a tuple with the Osdid field value
// and a boolean to check if the value has been set.
func (o *DiskSummary) GetOsdidOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Osdid, true
}

// SetOsdid sets field value
func (o *DiskSummary) SetOsdid(v float32) {
	o.Osdid = v
}

// GetSize returns the Size field value
func (o *DiskSummary) GetSize() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Size
}

// GetSizeOk returns a tuple with the Size field value
// and a boolean to check if the value has been set.
func (o *DiskSummary) GetSizeOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Size, true
}

// SetSize sets field value
func (o *DiskSummary) SetSize(v float32) {
	o.Size = v
}

// GetByIdLink returns the ByIdLink field value if set, zero value otherwise.
func (o *DiskSummary) GetByIdLink() string {
	if o == nil || IsNil(o.ByIdLink) {
		var ret string
		return ret
	}
	return *o.ByIdLink
}

// GetByIdLinkOk returns a tuple with the ByIdLink field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskSummary) GetByIdLinkOk() (*string, bool) {
	if o == nil || IsNil(o.ByIdLink) {
		return nil, false
	}
	return o.ByIdLink, true
}

// HasByIdLink returns a boolean if a field has been set.
func (o *DiskSummary) HasByIdLink() bool {
	if o != nil && !IsNil(o.ByIdLink) {
		return true
	}

	return false
}

// SetByIdLink gets a reference to the given string and assigns it to the ByIdLink field.
func (o *DiskSummary) SetByIdLink(v string) {
	o.ByIdLink = &v
}

// GetModel returns the Model field value if set, zero value otherwise.
func (o *DiskSummary) GetModel() string {
	if o == nil || IsNil(o.Model) {
		var ret string
		return ret
	}
	return *o.Model
}

// GetModelOk returns a tuple with the Model field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskSummary) GetModelOk() (*string, bool) {
	if o == nil || IsNil(o.Model) {
		return nil, false
	}
	return o.Model, true
}

// HasModel returns a boolean if a field has been set.
func (o *DiskSummary) HasModel() bool {
	if o != nil && !IsNil(o.Model) {
		return true
	}

	return false
}

// SetModel gets a reference to the given string and assigns it to the Model field.
func (o *DiskSummary) SetModel(v string) {
	o.Model = &v
}

// GetParent returns the Parent field value if set, zero value otherwise.
func (o *DiskSummary) GetParent() string {
	if o == nil || IsNil(o.Parent) {
		var ret string
		return ret
	}
	return *o.Parent
}

// GetParentOk returns a tuple with the Parent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskSummary) GetParentOk() (*string, bool) {
	if o == nil || IsNil(o.Parent) {
		return nil, false
	}
	return o.Parent, true
}

// HasParent returns a boolean if a field has been set.
func (o *DiskSummary) HasParent() bool {
	if o != nil && !IsNil(o.Parent) {
		return true
	}

	return false
}

// SetParent gets a reference to the given string and assigns it to the Parent field.
func (o *DiskSummary) SetParent(v string) {
	o.Parent = &v
}

// GetHealth returns the Health field value if set, zero value otherwise.
func (o *DiskSummary) GetHealth() string {
	if o == nil || IsNil(o.Health) {
		var ret string
		return ret
	}
	return *o.Health
}

// GetHealthOk returns a tuple with the Health field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskSummary) GetHealthOk() (*string, bool) {
	if o == nil || IsNil(o.Health) {
		return nil, false
	}
	return o.Health, true
}

// HasHealth returns a boolean if a field has been set.
func (o *DiskSummary) HasHealth() bool {
	if o != nil && !IsNil(o.Health) {
		return true
	}

	return false
}

// SetHealth gets a reference to the given string and assigns it to the Health field.
func (o *DiskSummary) SetHealth(v string) {
	o.Health = &v
}

// GetSerial returns the Serial field value if set, zero value otherwise.
func (o *DiskSummary) GetSerial() string {
	if o == nil || IsNil(o.Serial) {
		var ret string
		return ret
	}
	return *o.Serial
}

// GetSerialOk returns a tuple with the Serial field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskSummary) GetSerialOk() (*string, bool) {
	if o == nil || IsNil(o.Serial) {
		return nil, false
	}
	return o.Serial, true
}

// HasSerial returns a boolean if a field has been set.
func (o *DiskSummary) HasSerial() bool {
	if o != nil && !IsNil(o.Serial) {
		return true
	}

	return false
}

// SetSerial gets a reference to the given string and assigns it to the Serial field.
func (o *DiskSummary) SetSerial(v string) {
	o.Serial = &v
}

// GetRpm returns the Rpm field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DiskSummary) GetRpm() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Rpm
}

// GetRpmOk returns a tuple with the Rpm field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DiskSummary) GetRpmOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Rpm) {
		return nil, false
	}
	return &o.Rpm, true
}

// HasRpm returns a boolean if a field has been set.
func (o *DiskSummary) HasRpm() bool {
	if o != nil && IsNil(o.Rpm) {
		return true
	}

	return false
}

// SetRpm gets a reference to the given interface{} and assigns it to the Rpm field.
func (o *DiskSummary) SetRpm(v interface{}) {
	o.Rpm = v
}

// GetWwn returns the Wwn field value if set, zero value otherwise.
func (o *DiskSummary) GetWwn() string {
	if o == nil || IsNil(o.Wwn) {
		var ret string
		return ret
	}
	return *o.Wwn
}

// GetWwnOk returns a tuple with the Wwn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskSummary) GetWwnOk() (*string, bool) {
	if o == nil || IsNil(o.Wwn) {
		return nil, false
	}
	return o.Wwn, true
}

// HasWwn returns a boolean if a field has been set.
func (o *DiskSummary) HasWwn() bool {
	if o != nil && !IsNil(o.Wwn) {
		return true
	}

	return false
}

// SetWwn gets a reference to the given string and assigns it to the Wwn field.
func (o *DiskSummary) SetWwn(v string) {
	o.Wwn = &v
}

// GetVendor returns the Vendor field value if set, zero value otherwise.
func (o *DiskSummary) GetVendor() string {
	if o == nil || IsNil(o.Vendor) {
		var ret string
		return ret
	}
	return *o.Vendor
}

// GetVendorOk returns a tuple with the Vendor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskSummary) GetVendorOk() (*string, bool) {
	if o == nil || IsNil(o.Vendor) {
		return nil, false
	}
	return o.Vendor, true
}

// HasVendor returns a boolean if a field has been set.
func (o *DiskSummary) HasVendor() bool {
	if o != nil && !IsNil(o.Vendor) {
		return true
	}

	return false
}

// SetVendor gets a reference to the given string and assigns it to the Vendor field.
func (o *DiskSummary) SetVendor(v string) {
	o.Vendor = &v
}

// GetWearout returns the Wearout field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DiskSummary) GetWearout() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Wearout
}

// GetWearoutOk returns a tuple with the Wearout field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DiskSummary) GetWearoutOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Wearout) {
		return nil, false
	}
	return &o.Wearout, true
}

// HasWearout returns a boolean if a field has been set.
func (o *DiskSummary) HasWearout() bool {
	if o != nil && IsNil(o.Wearout) {
		return true
	}

	return false
}

// SetWearout gets a reference to the given interface{} and assigns it to the Wearout field.
func (o *DiskSummary) SetWearout(v interface{}) {
	o.Wearout = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *DiskSummary) GetType() DiskType {
	if o == nil || IsNil(o.Type) {
		var ret DiskType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskSummary) GetTypeOk() (*DiskType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *DiskSummary) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given DiskType and assigns it to the Type field.
func (o *DiskSummary) SetType(v DiskType) {
	o.Type = &v
}

// GetMounted returns the Mounted field value if set, zero value otherwise.
func (o *DiskSummary) GetMounted() float32 {
	if o == nil || IsNil(o.Mounted) {
		var ret float32
		return ret
	}
	return *o.Mounted
}

// GetMountedOk returns a tuple with the Mounted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskSummary) GetMountedOk() (*float32, bool) {
	if o == nil || IsNil(o.Mounted) {
		return nil, false
	}
	return o.Mounted, true
}

// HasMounted returns a boolean if a field has been set.
func (o *DiskSummary) HasMounted() bool {
	if o != nil && !IsNil(o.Mounted) {
		return true
	}

	return false
}

// SetMounted gets a reference to the given float32 and assigns it to the Mounted field.
func (o *DiskSummary) SetMounted(v float32) {
	o.Mounted = &v
}

func (o DiskSummary) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DiskSummary) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["devpath"] = o.Devpath
	toSerialize["gpt"] = o.Gpt
	toSerialize["osdid"] = o.Osdid
	toSerialize["size"] = o.Size
	if !IsNil(o.ByIdLink) {
		toSerialize["by_id_link"] = o.ByIdLink
	}
	if !IsNil(o.Model) {
		toSerialize["model"] = o.Model
	}
	if !IsNil(o.Parent) {
		toSerialize["parent"] = o.Parent
	}
	if !IsNil(o.Health) {
		toSerialize["health"] = o.Health
	}
	if !IsNil(o.Serial) {
		toSerialize["serial"] = o.Serial
	}
	if o.Rpm != nil {
		toSerialize["rpm"] = o.Rpm
	}
	if !IsNil(o.Wwn) {
		toSerialize["wwn"] = o.Wwn
	}
	if !IsNil(o.Vendor) {
		toSerialize["vendor"] = o.Vendor
	}
	if o.Wearout != nil {
		toSerialize["wearout"] = o.Wearout
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Mounted) {
		toSerialize["mounted"] = o.Mounted
	}
	return toSerialize, nil
}

type NullableDiskSummary struct {
	value *DiskSummary
	isSet bool
}

func (v NullableDiskSummary) Get() *DiskSummary {
	return v.value
}

func (v *NullableDiskSummary) Set(val *DiskSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableDiskSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableDiskSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDiskSummary(val *DiskSummary) *NullableDiskSummary {
	return &NullableDiskSummary{value: val, isSet: true}
}

func (v NullableDiskSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDiskSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


