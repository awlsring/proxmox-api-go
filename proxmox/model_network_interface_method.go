/*
Proxmox

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2023-01-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package proxmox

import (
	"encoding/json"
	"fmt"
)

// NetworkInterfaceMethod the model 'NetworkInterfaceMethod'
type NetworkInterfaceMethod string

// List of NetworkInterfaceMethod
const (
	NETWORKINTERFACEMETHOD_MANUAL NetworkInterfaceMethod = "manual"
	NETWORKINTERFACEMETHOD_STATIC NetworkInterfaceMethod = "static"
	NETWORKINTERFACEMETHOD_NONE NetworkInterfaceMethod = "none"
	NETWORKINTERFACEMETHOD_DHCP NetworkInterfaceMethod = "dhcp"
	NETWORKINTERFACEMETHOD_IPV6_AUTOCONF NetworkInterfaceMethod = "ipv6_autoconf"
)

// All allowed values of NetworkInterfaceMethod enum
var AllowedNetworkInterfaceMethodEnumValues = []NetworkInterfaceMethod{
	"manual",
	"static",
	"none",
	"dhcp",
	"ipv6_autoconf",
}

func (v *NetworkInterfaceMethod) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := NetworkInterfaceMethod(value)
	for _, existing := range AllowedNetworkInterfaceMethodEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid NetworkInterfaceMethod", value)
}

// NewNetworkInterfaceMethodFromValue returns a pointer to a valid NetworkInterfaceMethod
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewNetworkInterfaceMethodFromValue(v string) (*NetworkInterfaceMethod, error) {
	ev := NetworkInterfaceMethod(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for NetworkInterfaceMethod: valid values are %v", v, AllowedNetworkInterfaceMethodEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v NetworkInterfaceMethod) IsValid() bool {
	for _, existing := range AllowedNetworkInterfaceMethodEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to NetworkInterfaceMethod value
func (v NetworkInterfaceMethod) Ptr() *NetworkInterfaceMethod {
	return &v
}

type NullableNetworkInterfaceMethod struct {
	value *NetworkInterfaceMethod
	isSet bool
}

func (v NullableNetworkInterfaceMethod) Get() *NetworkInterfaceMethod {
	return v.value
}

func (v *NullableNetworkInterfaceMethod) Set(val *NetworkInterfaceMethod) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkInterfaceMethod) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkInterfaceMethod) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkInterfaceMethod(val *NetworkInterfaceMethod) *NullableNetworkInterfaceMethod {
	return &NullableNetworkInterfaceMethod{value: val, isSet: true}
}

func (v NullableNetworkInterfaceMethod) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkInterfaceMethod) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

