/*
Proxmox

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2023-01-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package proxmox

import (
	"encoding/json"
	"fmt"
)

// RealmSyncScope the model 'RealmSyncScope'
type RealmSyncScope string

// List of RealmSyncScope
const (
	REALMSYNCSCOPE_USERS RealmSyncScope = "users"
	REALMSYNCSCOPE_GROUPS RealmSyncScope = "groups"
	REALMSYNCSCOPE_BOTH RealmSyncScope = "both"
)

// All allowed values of RealmSyncScope enum
var AllowedRealmSyncScopeEnumValues = []RealmSyncScope{
	"users",
	"groups",
	"both",
}

func (v *RealmSyncScope) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RealmSyncScope(value)
	for _, existing := range AllowedRealmSyncScopeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RealmSyncScope", value)
}

// NewRealmSyncScopeFromValue returns a pointer to a valid RealmSyncScope
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRealmSyncScopeFromValue(v string) (*RealmSyncScope, error) {
	ev := RealmSyncScope(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RealmSyncScope: valid values are %v", v, AllowedRealmSyncScopeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RealmSyncScope) IsValid() bool {
	for _, existing := range AllowedRealmSyncScopeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RealmSyncScope value
func (v RealmSyncScope) Ptr() *RealmSyncScope {
	return &v
}

type NullableRealmSyncScope struct {
	value *RealmSyncScope
	isSet bool
}

func (v NullableRealmSyncScope) Get() *RealmSyncScope {
	return v.value
}

func (v *NullableRealmSyncScope) Set(val *RealmSyncScope) {
	v.value = val
	v.isSet = true
}

func (v NullableRealmSyncScope) IsSet() bool {
	return v.isSet
}

func (v *NullableRealmSyncScope) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRealmSyncScope(val *RealmSyncScope) *NullableRealmSyncScope {
	return &NullableRealmSyncScope{value: val, isSet: true}
}

func (v NullableRealmSyncScope) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRealmSyncScope) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

