/*
Proxmox

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2023-01-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package proxmox

import (
	"encoding/json"
	"fmt"
)

// AccessControlType the model 'AccessControlType'
type AccessControlType string

// List of AccessControlType
const (
	ACCESSCONTROLTYPE_USER AccessControlType = "user"
	ACCESSCONTROLTYPE_GROUP AccessControlType = "group"
	ACCESSCONTROLTYPE_TOKEN AccessControlType = "token"
)

// All allowed values of AccessControlType enum
var AllowedAccessControlTypeEnumValues = []AccessControlType{
	"user",
	"group",
	"token",
}

func (v *AccessControlType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AccessControlType(value)
	for _, existing := range AllowedAccessControlTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AccessControlType", value)
}

// NewAccessControlTypeFromValue returns a pointer to a valid AccessControlType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAccessControlTypeFromValue(v string) (*AccessControlType, error) {
	ev := AccessControlType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AccessControlType: valid values are %v", v, AllowedAccessControlTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AccessControlType) IsValid() bool {
	for _, existing := range AllowedAccessControlTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AccessControlType value
func (v AccessControlType) Ptr() *AccessControlType {
	return &v
}

type NullableAccessControlType struct {
	value *AccessControlType
	isSet bool
}

func (v NullableAccessControlType) Get() *AccessControlType {
	return v.value
}

func (v *NullableAccessControlType) Set(val *AccessControlType) {
	v.value = val
	v.isSet = true
}

func (v NullableAccessControlType) IsSet() bool {
	return v.isSet
}

func (v *NullableAccessControlType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccessControlType(val *AccessControlType) *NullableAccessControlType {
	return &NullableAccessControlType{value: val, isSet: true}
}

func (v NullableAccessControlType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccessControlType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

