/*
Proxmox

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2023-01-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package proxmox

import (
	"encoding/json"
)

// checks if the ModifyUserRequestContent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModifyUserRequestContent{}

// ModifyUserRequestContent struct for ModifyUserRequestContent
type ModifyUserRequestContent struct {
	Comment *string `json:"comment,omitempty"`
	// An integer used to represent a boolean. 0 is false, 1 is true.
	Append *float32 `json:"append,omitempty"`
	Email *string `json:"email,omitempty"`
	// An integer used to represent a boolean. 0 is false, 1 is true.
	Enable *float32 `json:"enable,omitempty"`
	Firstname *string `json:"firstname,omitempty"`
	Lastname *string `json:"lastname,omitempty"`
	Groups *string `json:"groups,omitempty"`
	Keys *string `json:"keys,omitempty"`
	Expire *float32 `json:"expire,omitempty"`
}

// NewModifyUserRequestContent instantiates a new ModifyUserRequestContent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModifyUserRequestContent() *ModifyUserRequestContent {
	this := ModifyUserRequestContent{}
	return &this
}

// NewModifyUserRequestContentWithDefaults instantiates a new ModifyUserRequestContent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModifyUserRequestContentWithDefaults() *ModifyUserRequestContent {
	this := ModifyUserRequestContent{}
	return &this
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *ModifyUserRequestContent) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModifyUserRequestContent) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *ModifyUserRequestContent) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *ModifyUserRequestContent) SetComment(v string) {
	o.Comment = &v
}

// GetAppend returns the Append field value if set, zero value otherwise.
func (o *ModifyUserRequestContent) GetAppend() float32 {
	if o == nil || IsNil(o.Append) {
		var ret float32
		return ret
	}
	return *o.Append
}

// GetAppendOk returns a tuple with the Append field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModifyUserRequestContent) GetAppendOk() (*float32, bool) {
	if o == nil || IsNil(o.Append) {
		return nil, false
	}
	return o.Append, true
}

// HasAppend returns a boolean if a field has been set.
func (o *ModifyUserRequestContent) HasAppend() bool {
	if o != nil && !IsNil(o.Append) {
		return true
	}

	return false
}

// SetAppend gets a reference to the given float32 and assigns it to the Append field.
func (o *ModifyUserRequestContent) SetAppend(v float32) {
	o.Append = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *ModifyUserRequestContent) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModifyUserRequestContent) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *ModifyUserRequestContent) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *ModifyUserRequestContent) SetEmail(v string) {
	o.Email = &v
}

// GetEnable returns the Enable field value if set, zero value otherwise.
func (o *ModifyUserRequestContent) GetEnable() float32 {
	if o == nil || IsNil(o.Enable) {
		var ret float32
		return ret
	}
	return *o.Enable
}

// GetEnableOk returns a tuple with the Enable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModifyUserRequestContent) GetEnableOk() (*float32, bool) {
	if o == nil || IsNil(o.Enable) {
		return nil, false
	}
	return o.Enable, true
}

// HasEnable returns a boolean if a field has been set.
func (o *ModifyUserRequestContent) HasEnable() bool {
	if o != nil && !IsNil(o.Enable) {
		return true
	}

	return false
}

// SetEnable gets a reference to the given float32 and assigns it to the Enable field.
func (o *ModifyUserRequestContent) SetEnable(v float32) {
	o.Enable = &v
}

// GetFirstname returns the Firstname field value if set, zero value otherwise.
func (o *ModifyUserRequestContent) GetFirstname() string {
	if o == nil || IsNil(o.Firstname) {
		var ret string
		return ret
	}
	return *o.Firstname
}

// GetFirstnameOk returns a tuple with the Firstname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModifyUserRequestContent) GetFirstnameOk() (*string, bool) {
	if o == nil || IsNil(o.Firstname) {
		return nil, false
	}
	return o.Firstname, true
}

// HasFirstname returns a boolean if a field has been set.
func (o *ModifyUserRequestContent) HasFirstname() bool {
	if o != nil && !IsNil(o.Firstname) {
		return true
	}

	return false
}

// SetFirstname gets a reference to the given string and assigns it to the Firstname field.
func (o *ModifyUserRequestContent) SetFirstname(v string) {
	o.Firstname = &v
}

// GetLastname returns the Lastname field value if set, zero value otherwise.
func (o *ModifyUserRequestContent) GetLastname() string {
	if o == nil || IsNil(o.Lastname) {
		var ret string
		return ret
	}
	return *o.Lastname
}

// GetLastnameOk returns a tuple with the Lastname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModifyUserRequestContent) GetLastnameOk() (*string, bool) {
	if o == nil || IsNil(o.Lastname) {
		return nil, false
	}
	return o.Lastname, true
}

// HasLastname returns a boolean if a field has been set.
func (o *ModifyUserRequestContent) HasLastname() bool {
	if o != nil && !IsNil(o.Lastname) {
		return true
	}

	return false
}

// SetLastname gets a reference to the given string and assigns it to the Lastname field.
func (o *ModifyUserRequestContent) SetLastname(v string) {
	o.Lastname = &v
}

// GetGroups returns the Groups field value if set, zero value otherwise.
func (o *ModifyUserRequestContent) GetGroups() string {
	if o == nil || IsNil(o.Groups) {
		var ret string
		return ret
	}
	return *o.Groups
}

// GetGroupsOk returns a tuple with the Groups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModifyUserRequestContent) GetGroupsOk() (*string, bool) {
	if o == nil || IsNil(o.Groups) {
		return nil, false
	}
	return o.Groups, true
}

// HasGroups returns a boolean if a field has been set.
func (o *ModifyUserRequestContent) HasGroups() bool {
	if o != nil && !IsNil(o.Groups) {
		return true
	}

	return false
}

// SetGroups gets a reference to the given string and assigns it to the Groups field.
func (o *ModifyUserRequestContent) SetGroups(v string) {
	o.Groups = &v
}

// GetKeys returns the Keys field value if set, zero value otherwise.
func (o *ModifyUserRequestContent) GetKeys() string {
	if o == nil || IsNil(o.Keys) {
		var ret string
		return ret
	}
	return *o.Keys
}

// GetKeysOk returns a tuple with the Keys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModifyUserRequestContent) GetKeysOk() (*string, bool) {
	if o == nil || IsNil(o.Keys) {
		return nil, false
	}
	return o.Keys, true
}

// HasKeys returns a boolean if a field has been set.
func (o *ModifyUserRequestContent) HasKeys() bool {
	if o != nil && !IsNil(o.Keys) {
		return true
	}

	return false
}

// SetKeys gets a reference to the given string and assigns it to the Keys field.
func (o *ModifyUserRequestContent) SetKeys(v string) {
	o.Keys = &v
}

// GetExpire returns the Expire field value if set, zero value otherwise.
func (o *ModifyUserRequestContent) GetExpire() float32 {
	if o == nil || IsNil(o.Expire) {
		var ret float32
		return ret
	}
	return *o.Expire
}

// GetExpireOk returns a tuple with the Expire field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModifyUserRequestContent) GetExpireOk() (*float32, bool) {
	if o == nil || IsNil(o.Expire) {
		return nil, false
	}
	return o.Expire, true
}

// HasExpire returns a boolean if a field has been set.
func (o *ModifyUserRequestContent) HasExpire() bool {
	if o != nil && !IsNil(o.Expire) {
		return true
	}

	return false
}

// SetExpire gets a reference to the given float32 and assigns it to the Expire field.
func (o *ModifyUserRequestContent) SetExpire(v float32) {
	o.Expire = &v
}

func (o ModifyUserRequestContent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModifyUserRequestContent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.Append) {
		toSerialize["append"] = o.Append
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.Enable) {
		toSerialize["enable"] = o.Enable
	}
	if !IsNil(o.Firstname) {
		toSerialize["firstname"] = o.Firstname
	}
	if !IsNil(o.Lastname) {
		toSerialize["lastname"] = o.Lastname
	}
	if !IsNil(o.Groups) {
		toSerialize["groups"] = o.Groups
	}
	if !IsNil(o.Keys) {
		toSerialize["keys"] = o.Keys
	}
	if !IsNil(o.Expire) {
		toSerialize["expire"] = o.Expire
	}
	return toSerialize, nil
}

type NullableModifyUserRequestContent struct {
	value *ModifyUserRequestContent
	isSet bool
}

func (v NullableModifyUserRequestContent) Get() *ModifyUserRequestContent {
	return v.value
}

func (v *NullableModifyUserRequestContent) Set(val *ModifyUserRequestContent) {
	v.value = val
	v.isSet = true
}

func (v NullableModifyUserRequestContent) IsSet() bool {
	return v.isSet
}

func (v *NullableModifyUserRequestContent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModifyUserRequestContent(val *ModifyUserRequestContent) *NullableModifyUserRequestContent {
	return &NullableModifyUserRequestContent{value: val, isSet: true}
}

func (v NullableModifyUserRequestContent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModifyUserRequestContent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


