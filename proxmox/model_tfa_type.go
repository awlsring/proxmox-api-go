/*
Proxmox

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2023-01-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package proxmox

import (
	"encoding/json"
	"fmt"
)

// TFAType the model 'TFAType'
type TFAType string

// List of TFAType
const (
	TFATYPE_YUBICO TFAType = "yubico"
	TFATYPE_OAUTH TFAType = "oauth"
)

// All allowed values of TFAType enum
var AllowedTFATypeEnumValues = []TFAType{
	"yubico",
	"oauth",
}

func (v *TFAType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TFAType(value)
	for _, existing := range AllowedTFATypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TFAType", value)
}

// NewTFATypeFromValue returns a pointer to a valid TFAType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTFATypeFromValue(v string) (*TFAType, error) {
	ev := TFAType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TFAType: valid values are %v", v, AllowedTFATypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TFAType) IsValid() bool {
	for _, existing := range AllowedTFATypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TFAType value
func (v TFAType) Ptr() *TFAType {
	return &v
}

type NullableTFAType struct {
	value *TFAType
	isSet bool
}

func (v NullableTFAType) Get() *TFAType {
	return v.value
}

func (v *NullableTFAType) Set(val *TFAType) {
	v.value = val
	v.isSet = true
}

func (v NullableTFAType) IsSet() bool {
	return v.isSet
}

func (v *NullableTFAType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTFAType(val *TFAType) *NullableTFAType {
	return &NullableTFAType{value: val, isSet: true}
}

func (v NullableTFAType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTFAType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

