/*
Proxmox

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2023-01-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package proxmox

import (
	"encoding/json"
	"fmt"
)

// VirtualMachineArchitecture the model 'VirtualMachineArchitecture'
type VirtualMachineArchitecture string

// List of VirtualMachineArchitecture
const (
	VIRTUALMACHINEARCHITECTURE_X86_64 VirtualMachineArchitecture = "x86_64"
	VIRTUALMACHINEARCHITECTURE_AARCH64 VirtualMachineArchitecture = "aarch64"
)

// All allowed values of VirtualMachineArchitecture enum
var AllowedVirtualMachineArchitectureEnumValues = []VirtualMachineArchitecture{
	"x86_64",
	"aarch64",
}

func (v *VirtualMachineArchitecture) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VirtualMachineArchitecture(value)
	for _, existing := range AllowedVirtualMachineArchitectureEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VirtualMachineArchitecture", value)
}

// NewVirtualMachineArchitectureFromValue returns a pointer to a valid VirtualMachineArchitecture
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVirtualMachineArchitectureFromValue(v string) (*VirtualMachineArchitecture, error) {
	ev := VirtualMachineArchitecture(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VirtualMachineArchitecture: valid values are %v", v, AllowedVirtualMachineArchitectureEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VirtualMachineArchitecture) IsValid() bool {
	for _, existing := range AllowedVirtualMachineArchitectureEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VirtualMachineArchitecture value
func (v VirtualMachineArchitecture) Ptr() *VirtualMachineArchitecture {
	return &v
}

type NullableVirtualMachineArchitecture struct {
	value *VirtualMachineArchitecture
	isSet bool
}

func (v NullableVirtualMachineArchitecture) Get() *VirtualMachineArchitecture {
	return v.value
}

func (v *NullableVirtualMachineArchitecture) Set(val *VirtualMachineArchitecture) {
	v.value = val
	v.isSet = true
}

func (v NullableVirtualMachineArchitecture) IsSet() bool {
	return v.isSet
}

func (v *NullableVirtualMachineArchitecture) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVirtualMachineArchitecture(val *VirtualMachineArchitecture) *NullableVirtualMachineArchitecture {
	return &NullableVirtualMachineArchitecture{value: val, isSet: true}
}

func (v NullableVirtualMachineArchitecture) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVirtualMachineArchitecture) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

