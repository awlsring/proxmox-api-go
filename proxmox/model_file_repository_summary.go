/*
Proxmox

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2023-01-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package proxmox

import (
	"encoding/json"
)

// FileRepositorySummary struct for FileRepositorySummary
type FileRepositorySummary struct {
	Enabled *float32 `json:"Enabled,omitempty"`
	Components []string `json:"Components,omitempty"`
	FileType *string `json:"FileType,omitempty"`
	URIs []string `json:"URIs,omitempty"`
	Types []string `json:"Types,omitempty"`
	Suites []string `json:"Suites,omitempty"`
	Comment *string `json:"Comment,omitempty"`
}

// NewFileRepositorySummary instantiates a new FileRepositorySummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFileRepositorySummary() *FileRepositorySummary {
	this := FileRepositorySummary{}
	return &this
}

// NewFileRepositorySummaryWithDefaults instantiates a new FileRepositorySummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFileRepositorySummaryWithDefaults() *FileRepositorySummary {
	this := FileRepositorySummary{}
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *FileRepositorySummary) GetEnabled() float32 {
	if o == nil || isNil(o.Enabled) {
		var ret float32
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileRepositorySummary) GetEnabledOk() (*float32, bool) {
	if o == nil || isNil(o.Enabled) {
    return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *FileRepositorySummary) HasEnabled() bool {
	if o != nil && !isNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given float32 and assigns it to the Enabled field.
func (o *FileRepositorySummary) SetEnabled(v float32) {
	o.Enabled = &v
}

// GetComponents returns the Components field value if set, zero value otherwise.
func (o *FileRepositorySummary) GetComponents() []string {
	if o == nil || isNil(o.Components) {
		var ret []string
		return ret
	}
	return o.Components
}

// GetComponentsOk returns a tuple with the Components field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileRepositorySummary) GetComponentsOk() ([]string, bool) {
	if o == nil || isNil(o.Components) {
    return nil, false
	}
	return o.Components, true
}

// HasComponents returns a boolean if a field has been set.
func (o *FileRepositorySummary) HasComponents() bool {
	if o != nil && !isNil(o.Components) {
		return true
	}

	return false
}

// SetComponents gets a reference to the given []string and assigns it to the Components field.
func (o *FileRepositorySummary) SetComponents(v []string) {
	o.Components = v
}

// GetFileType returns the FileType field value if set, zero value otherwise.
func (o *FileRepositorySummary) GetFileType() string {
	if o == nil || isNil(o.FileType) {
		var ret string
		return ret
	}
	return *o.FileType
}

// GetFileTypeOk returns a tuple with the FileType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileRepositorySummary) GetFileTypeOk() (*string, bool) {
	if o == nil || isNil(o.FileType) {
    return nil, false
	}
	return o.FileType, true
}

// HasFileType returns a boolean if a field has been set.
func (o *FileRepositorySummary) HasFileType() bool {
	if o != nil && !isNil(o.FileType) {
		return true
	}

	return false
}

// SetFileType gets a reference to the given string and assigns it to the FileType field.
func (o *FileRepositorySummary) SetFileType(v string) {
	o.FileType = &v
}

// GetURIs returns the URIs field value if set, zero value otherwise.
func (o *FileRepositorySummary) GetURIs() []string {
	if o == nil || isNil(o.URIs) {
		var ret []string
		return ret
	}
	return o.URIs
}

// GetURIsOk returns a tuple with the URIs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileRepositorySummary) GetURIsOk() ([]string, bool) {
	if o == nil || isNil(o.URIs) {
    return nil, false
	}
	return o.URIs, true
}

// HasURIs returns a boolean if a field has been set.
func (o *FileRepositorySummary) HasURIs() bool {
	if o != nil && !isNil(o.URIs) {
		return true
	}

	return false
}

// SetURIs gets a reference to the given []string and assigns it to the URIs field.
func (o *FileRepositorySummary) SetURIs(v []string) {
	o.URIs = v
}

// GetTypes returns the Types field value if set, zero value otherwise.
func (o *FileRepositorySummary) GetTypes() []string {
	if o == nil || isNil(o.Types) {
		var ret []string
		return ret
	}
	return o.Types
}

// GetTypesOk returns a tuple with the Types field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileRepositorySummary) GetTypesOk() ([]string, bool) {
	if o == nil || isNil(o.Types) {
    return nil, false
	}
	return o.Types, true
}

// HasTypes returns a boolean if a field has been set.
func (o *FileRepositorySummary) HasTypes() bool {
	if o != nil && !isNil(o.Types) {
		return true
	}

	return false
}

// SetTypes gets a reference to the given []string and assigns it to the Types field.
func (o *FileRepositorySummary) SetTypes(v []string) {
	o.Types = v
}

// GetSuites returns the Suites field value if set, zero value otherwise.
func (o *FileRepositorySummary) GetSuites() []string {
	if o == nil || isNil(o.Suites) {
		var ret []string
		return ret
	}
	return o.Suites
}

// GetSuitesOk returns a tuple with the Suites field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileRepositorySummary) GetSuitesOk() ([]string, bool) {
	if o == nil || isNil(o.Suites) {
    return nil, false
	}
	return o.Suites, true
}

// HasSuites returns a boolean if a field has been set.
func (o *FileRepositorySummary) HasSuites() bool {
	if o != nil && !isNil(o.Suites) {
		return true
	}

	return false
}

// SetSuites gets a reference to the given []string and assigns it to the Suites field.
func (o *FileRepositorySummary) SetSuites(v []string) {
	o.Suites = v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *FileRepositorySummary) GetComment() string {
	if o == nil || isNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileRepositorySummary) GetCommentOk() (*string, bool) {
	if o == nil || isNil(o.Comment) {
    return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *FileRepositorySummary) HasComment() bool {
	if o != nil && !isNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *FileRepositorySummary) SetComment(v string) {
	o.Comment = &v
}

func (o FileRepositorySummary) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Enabled) {
		toSerialize["Enabled"] = o.Enabled
	}
	if !isNil(o.Components) {
		toSerialize["Components"] = o.Components
	}
	if !isNil(o.FileType) {
		toSerialize["FileType"] = o.FileType
	}
	if !isNil(o.URIs) {
		toSerialize["URIs"] = o.URIs
	}
	if !isNil(o.Types) {
		toSerialize["Types"] = o.Types
	}
	if !isNil(o.Suites) {
		toSerialize["Suites"] = o.Suites
	}
	if !isNil(o.Comment) {
		toSerialize["Comment"] = o.Comment
	}
	return json.Marshal(toSerialize)
}

type NullableFileRepositorySummary struct {
	value *FileRepositorySummary
	isSet bool
}

func (v NullableFileRepositorySummary) Get() *FileRepositorySummary {
	return v.value
}

func (v *NullableFileRepositorySummary) Set(val *FileRepositorySummary) {
	v.value = val
	v.isSet = true
}

func (v NullableFileRepositorySummary) IsSet() bool {
	return v.isSet
}

func (v *NullableFileRepositorySummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileRepositorySummary(val *FileRepositorySummary) *NullableFileRepositorySummary {
	return &NullableFileRepositorySummary{value: val, isSet: true}
}

func (v NullableFileRepositorySummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileRepositorySummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


