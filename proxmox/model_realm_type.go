/*
Proxmox

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2023-01-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package proxmox

import (
	"encoding/json"
	"fmt"
)

// RealmType the model 'RealmType'
type RealmType string

// List of RealmType
const (
	REALMTYPE_AD RealmType = "ad"
	REALMTYPE_LDAP RealmType = "ldap"
	REALMTYPE_PAM RealmType = "pam"
	REALMTYPE_PVE RealmType = "pve"
	REALMTYPE_OPENID RealmType = "openid"
)

// All allowed values of RealmType enum
var AllowedRealmTypeEnumValues = []RealmType{
	"ad",
	"ldap",
	"pam",
	"pve",
	"openid",
}

func (v *RealmType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RealmType(value)
	for _, existing := range AllowedRealmTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RealmType", value)
}

// NewRealmTypeFromValue returns a pointer to a valid RealmType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRealmTypeFromValue(v string) (*RealmType, error) {
	ev := RealmType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RealmType: valid values are %v", v, AllowedRealmTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RealmType) IsValid() bool {
	for _, existing := range AllowedRealmTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RealmType value
func (v RealmType) Ptr() *RealmType {
	return &v
}

type NullableRealmType struct {
	value *RealmType
	isSet bool
}

func (v NullableRealmType) Get() *RealmType {
	return v.value
}

func (v *NullableRealmType) Set(val *RealmType) {
	v.value = val
	v.isSet = true
}

func (v NullableRealmType) IsSet() bool {
	return v.isSet
}

func (v *NullableRealmType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRealmType(val *RealmType) *NullableRealmType {
	return &NullableRealmType{value: val, isSet: true}
}

func (v NullableRealmType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRealmType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

