/*
Proxmox

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2023-01-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package proxmox

import (
	"encoding/json"
)

// checks if the StorageSummary type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StorageSummary{}

// StorageSummary struct for StorageSummary
type StorageSummary struct {
	// The storage class name
	Storage string `json:"storage"`
	// Comma seperated list of content types in storage. Returned as a string
	Content *string `json:"content,omitempty"`
	Digest *string `json:"digest,omitempty"`
	Thinpool *string `json:"thinpool,omitempty"`
	Type *StorageType `json:"type,omitempty"`
	// The volume group name
	Vgname *string `json:"vgname,omitempty"`
	// The storage path
	Path *string `json:"path,omitempty"`
	// The storage mountpoint
	Mountpoint *string `json:"mountpoint,omitempty"`
	// The nodes that have access to this storage
	Nodes *string `json:"nodes,omitempty"`
}

// NewStorageSummary instantiates a new StorageSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStorageSummary(storage string) *StorageSummary {
	this := StorageSummary{}
	this.Storage = storage
	return &this
}

// NewStorageSummaryWithDefaults instantiates a new StorageSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStorageSummaryWithDefaults() *StorageSummary {
	this := StorageSummary{}
	return &this
}

// GetStorage returns the Storage field value
func (o *StorageSummary) GetStorage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Storage
}

// GetStorageOk returns a tuple with the Storage field value
// and a boolean to check if the value has been set.
func (o *StorageSummary) GetStorageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Storage, true
}

// SetStorage sets field value
func (o *StorageSummary) SetStorage(v string) {
	o.Storage = v
}

// GetContent returns the Content field value if set, zero value otherwise.
func (o *StorageSummary) GetContent() string {
	if o == nil || isNil(o.Content) {
		var ret string
		return ret
	}
	return *o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageSummary) GetContentOk() (*string, bool) {
	if o == nil || isNil(o.Content) {
		return nil, false
	}
	return o.Content, true
}

// HasContent returns a boolean if a field has been set.
func (o *StorageSummary) HasContent() bool {
	if o != nil && !isNil(o.Content) {
		return true
	}

	return false
}

// SetContent gets a reference to the given string and assigns it to the Content field.
func (o *StorageSummary) SetContent(v string) {
	o.Content = &v
}

// GetDigest returns the Digest field value if set, zero value otherwise.
func (o *StorageSummary) GetDigest() string {
	if o == nil || isNil(o.Digest) {
		var ret string
		return ret
	}
	return *o.Digest
}

// GetDigestOk returns a tuple with the Digest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageSummary) GetDigestOk() (*string, bool) {
	if o == nil || isNil(o.Digest) {
		return nil, false
	}
	return o.Digest, true
}

// HasDigest returns a boolean if a field has been set.
func (o *StorageSummary) HasDigest() bool {
	if o != nil && !isNil(o.Digest) {
		return true
	}

	return false
}

// SetDigest gets a reference to the given string and assigns it to the Digest field.
func (o *StorageSummary) SetDigest(v string) {
	o.Digest = &v
}

// GetThinpool returns the Thinpool field value if set, zero value otherwise.
func (o *StorageSummary) GetThinpool() string {
	if o == nil || isNil(o.Thinpool) {
		var ret string
		return ret
	}
	return *o.Thinpool
}

// GetThinpoolOk returns a tuple with the Thinpool field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageSummary) GetThinpoolOk() (*string, bool) {
	if o == nil || isNil(o.Thinpool) {
		return nil, false
	}
	return o.Thinpool, true
}

// HasThinpool returns a boolean if a field has been set.
func (o *StorageSummary) HasThinpool() bool {
	if o != nil && !isNil(o.Thinpool) {
		return true
	}

	return false
}

// SetThinpool gets a reference to the given string and assigns it to the Thinpool field.
func (o *StorageSummary) SetThinpool(v string) {
	o.Thinpool = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *StorageSummary) GetType() StorageType {
	if o == nil || isNil(o.Type) {
		var ret StorageType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageSummary) GetTypeOk() (*StorageType, bool) {
	if o == nil || isNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *StorageSummary) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given StorageType and assigns it to the Type field.
func (o *StorageSummary) SetType(v StorageType) {
	o.Type = &v
}

// GetVgname returns the Vgname field value if set, zero value otherwise.
func (o *StorageSummary) GetVgname() string {
	if o == nil || isNil(o.Vgname) {
		var ret string
		return ret
	}
	return *o.Vgname
}

// GetVgnameOk returns a tuple with the Vgname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageSummary) GetVgnameOk() (*string, bool) {
	if o == nil || isNil(o.Vgname) {
		return nil, false
	}
	return o.Vgname, true
}

// HasVgname returns a boolean if a field has been set.
func (o *StorageSummary) HasVgname() bool {
	if o != nil && !isNil(o.Vgname) {
		return true
	}

	return false
}

// SetVgname gets a reference to the given string and assigns it to the Vgname field.
func (o *StorageSummary) SetVgname(v string) {
	o.Vgname = &v
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *StorageSummary) GetPath() string {
	if o == nil || isNil(o.Path) {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageSummary) GetPathOk() (*string, bool) {
	if o == nil || isNil(o.Path) {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *StorageSummary) HasPath() bool {
	if o != nil && !isNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *StorageSummary) SetPath(v string) {
	o.Path = &v
}

// GetMountpoint returns the Mountpoint field value if set, zero value otherwise.
func (o *StorageSummary) GetMountpoint() string {
	if o == nil || isNil(o.Mountpoint) {
		var ret string
		return ret
	}
	return *o.Mountpoint
}

// GetMountpointOk returns a tuple with the Mountpoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageSummary) GetMountpointOk() (*string, bool) {
	if o == nil || isNil(o.Mountpoint) {
		return nil, false
	}
	return o.Mountpoint, true
}

// HasMountpoint returns a boolean if a field has been set.
func (o *StorageSummary) HasMountpoint() bool {
	if o != nil && !isNil(o.Mountpoint) {
		return true
	}

	return false
}

// SetMountpoint gets a reference to the given string and assigns it to the Mountpoint field.
func (o *StorageSummary) SetMountpoint(v string) {
	o.Mountpoint = &v
}

// GetNodes returns the Nodes field value if set, zero value otherwise.
func (o *StorageSummary) GetNodes() string {
	if o == nil || isNil(o.Nodes) {
		var ret string
		return ret
	}
	return *o.Nodes
}

// GetNodesOk returns a tuple with the Nodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageSummary) GetNodesOk() (*string, bool) {
	if o == nil || isNil(o.Nodes) {
		return nil, false
	}
	return o.Nodes, true
}

// HasNodes returns a boolean if a field has been set.
func (o *StorageSummary) HasNodes() bool {
	if o != nil && !isNil(o.Nodes) {
		return true
	}

	return false
}

// SetNodes gets a reference to the given string and assigns it to the Nodes field.
func (o *StorageSummary) SetNodes(v string) {
	o.Nodes = &v
}

func (o StorageSummary) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StorageSummary) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["storage"] = o.Storage
	if !isNil(o.Content) {
		toSerialize["content"] = o.Content
	}
	if !isNil(o.Digest) {
		toSerialize["digest"] = o.Digest
	}
	if !isNil(o.Thinpool) {
		toSerialize["thinpool"] = o.Thinpool
	}
	if !isNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !isNil(o.Vgname) {
		toSerialize["vgname"] = o.Vgname
	}
	if !isNil(o.Path) {
		toSerialize["path"] = o.Path
	}
	if !isNil(o.Mountpoint) {
		toSerialize["mountpoint"] = o.Mountpoint
	}
	if !isNil(o.Nodes) {
		toSerialize["nodes"] = o.Nodes
	}
	return toSerialize, nil
}

type NullableStorageSummary struct {
	value *StorageSummary
	isSet bool
}

func (v NullableStorageSummary) Get() *StorageSummary {
	return v.value
}

func (v *NullableStorageSummary) Set(val *StorageSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableStorageSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableStorageSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStorageSummary(val *StorageSummary) *NullableStorageSummary {
	return &NullableStorageSummary{value: val, isSet: true}
}

func (v NullableStorageSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStorageSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


