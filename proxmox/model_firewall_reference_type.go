/*
Proxmox

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2023-01-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package proxmox

import (
	"encoding/json"
	"fmt"
)

// FirewallReferenceType the model 'FirewallReferenceType'
type FirewallReferenceType string

// List of FirewallReferenceType
const (
	FIREWALLREFERENCETYPE_IPSET FirewallReferenceType = "ipset"
	FIREWALLREFERENCETYPE_ALIAS FirewallReferenceType = "alias"
)

// All allowed values of FirewallReferenceType enum
var AllowedFirewallReferenceTypeEnumValues = []FirewallReferenceType{
	"ipset",
	"alias",
}

func (v *FirewallReferenceType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FirewallReferenceType(value)
	for _, existing := range AllowedFirewallReferenceTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FirewallReferenceType", value)
}

// NewFirewallReferenceTypeFromValue returns a pointer to a valid FirewallReferenceType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFirewallReferenceTypeFromValue(v string) (*FirewallReferenceType, error) {
	ev := FirewallReferenceType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FirewallReferenceType: valid values are %v", v, AllowedFirewallReferenceTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FirewallReferenceType) IsValid() bool {
	for _, existing := range AllowedFirewallReferenceTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FirewallReferenceType value
func (v FirewallReferenceType) Ptr() *FirewallReferenceType {
	return &v
}

type NullableFirewallReferenceType struct {
	value *FirewallReferenceType
	isSet bool
}

func (v NullableFirewallReferenceType) Get() *FirewallReferenceType {
	return v.value
}

func (v *NullableFirewallReferenceType) Set(val *FirewallReferenceType) {
	v.value = val
	v.isSet = true
}

func (v NullableFirewallReferenceType) IsSet() bool {
	return v.isSet
}

func (v *NullableFirewallReferenceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFirewallReferenceType(val *FirewallReferenceType) *NullableFirewallReferenceType {
	return &NullableFirewallReferenceType{value: val, isSet: true}
}

func (v NullableFirewallReferenceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFirewallReferenceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

