/*
Proxmox

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2023-01-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package proxmox

import (
	"encoding/json"
)

// JoinInformation struct for JoinInformation
type JoinInformation struct {
	Totem TotemSummary `json:"totem"`
	PreferredNode string `json:"preferred_node"`
	ConfigDigest string `json:"config_digest"`
	Nodelist []CorosyncNodeSummary `json:"nodelist"`
}

// NewJoinInformation instantiates a new JoinInformation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJoinInformation(totem TotemSummary, preferredNode string, configDigest string, nodelist []CorosyncNodeSummary) *JoinInformation {
	this := JoinInformation{}
	this.Totem = totem
	this.PreferredNode = preferredNode
	this.ConfigDigest = configDigest
	this.Nodelist = nodelist
	return &this
}

// NewJoinInformationWithDefaults instantiates a new JoinInformation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJoinInformationWithDefaults() *JoinInformation {
	this := JoinInformation{}
	return &this
}

// GetTotem returns the Totem field value
func (o *JoinInformation) GetTotem() TotemSummary {
	if o == nil {
		var ret TotemSummary
		return ret
	}

	return o.Totem
}

// GetTotemOk returns a tuple with the Totem field value
// and a boolean to check if the value has been set.
func (o *JoinInformation) GetTotemOk() (*TotemSummary, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Totem, true
}

// SetTotem sets field value
func (o *JoinInformation) SetTotem(v TotemSummary) {
	o.Totem = v
}

// GetPreferredNode returns the PreferredNode field value
func (o *JoinInformation) GetPreferredNode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PreferredNode
}

// GetPreferredNodeOk returns a tuple with the PreferredNode field value
// and a boolean to check if the value has been set.
func (o *JoinInformation) GetPreferredNodeOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.PreferredNode, true
}

// SetPreferredNode sets field value
func (o *JoinInformation) SetPreferredNode(v string) {
	o.PreferredNode = v
}

// GetConfigDigest returns the ConfigDigest field value
func (o *JoinInformation) GetConfigDigest() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ConfigDigest
}

// GetConfigDigestOk returns a tuple with the ConfigDigest field value
// and a boolean to check if the value has been set.
func (o *JoinInformation) GetConfigDigestOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.ConfigDigest, true
}

// SetConfigDigest sets field value
func (o *JoinInformation) SetConfigDigest(v string) {
	o.ConfigDigest = v
}

// GetNodelist returns the Nodelist field value
func (o *JoinInformation) GetNodelist() []CorosyncNodeSummary {
	if o == nil {
		var ret []CorosyncNodeSummary
		return ret
	}

	return o.Nodelist
}

// GetNodelistOk returns a tuple with the Nodelist field value
// and a boolean to check if the value has been set.
func (o *JoinInformation) GetNodelistOk() ([]CorosyncNodeSummary, bool) {
	if o == nil {
    return nil, false
	}
	return o.Nodelist, true
}

// SetNodelist sets field value
func (o *JoinInformation) SetNodelist(v []CorosyncNodeSummary) {
	o.Nodelist = v
}

func (o JoinInformation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["totem"] = o.Totem
	}
	if true {
		toSerialize["preferred_node"] = o.PreferredNode
	}
	if true {
		toSerialize["config_digest"] = o.ConfigDigest
	}
	if true {
		toSerialize["nodelist"] = o.Nodelist
	}
	return json.Marshal(toSerialize)
}

type NullableJoinInformation struct {
	value *JoinInformation
	isSet bool
}

func (v NullableJoinInformation) Get() *JoinInformation {
	return v.value
}

func (v *NullableJoinInformation) Set(val *JoinInformation) {
	v.value = val
	v.isSet = true
}

func (v NullableJoinInformation) IsSet() bool {
	return v.isSet
}

func (v *NullableJoinInformation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJoinInformation(val *JoinInformation) *NullableJoinInformation {
	return &NullableJoinInformation{value: val, isSet: true}
}

func (v NullableJoinInformation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJoinInformation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


