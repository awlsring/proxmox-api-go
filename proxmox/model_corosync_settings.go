/*
Proxmox

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2023-01-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package proxmox

import (
	"encoding/json"
)

// checks if the CorosyncSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CorosyncSettings{}

// CorosyncSettings struct for CorosyncSettings
type CorosyncSettings struct {
	CorosyncAuthkey string `json:"corosync_authkey"`
	CorosyncConf string `json:"corosync_conf"`
	Warnings string `json:"warnings"`
}

// NewCorosyncSettings instantiates a new CorosyncSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCorosyncSettings(corosyncAuthkey string, corosyncConf string, warnings string) *CorosyncSettings {
	this := CorosyncSettings{}
	this.CorosyncAuthkey = corosyncAuthkey
	this.CorosyncConf = corosyncConf
	this.Warnings = warnings
	return &this
}

// NewCorosyncSettingsWithDefaults instantiates a new CorosyncSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCorosyncSettingsWithDefaults() *CorosyncSettings {
	this := CorosyncSettings{}
	return &this
}

// GetCorosyncAuthkey returns the CorosyncAuthkey field value
func (o *CorosyncSettings) GetCorosyncAuthkey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CorosyncAuthkey
}

// GetCorosyncAuthkeyOk returns a tuple with the CorosyncAuthkey field value
// and a boolean to check if the value has been set.
func (o *CorosyncSettings) GetCorosyncAuthkeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CorosyncAuthkey, true
}

// SetCorosyncAuthkey sets field value
func (o *CorosyncSettings) SetCorosyncAuthkey(v string) {
	o.CorosyncAuthkey = v
}

// GetCorosyncConf returns the CorosyncConf field value
func (o *CorosyncSettings) GetCorosyncConf() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CorosyncConf
}

// GetCorosyncConfOk returns a tuple with the CorosyncConf field value
// and a boolean to check if the value has been set.
func (o *CorosyncSettings) GetCorosyncConfOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CorosyncConf, true
}

// SetCorosyncConf sets field value
func (o *CorosyncSettings) SetCorosyncConf(v string) {
	o.CorosyncConf = v
}

// GetWarnings returns the Warnings field value
func (o *CorosyncSettings) GetWarnings() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value
// and a boolean to check if the value has been set.
func (o *CorosyncSettings) GetWarningsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Warnings, true
}

// SetWarnings sets field value
func (o *CorosyncSettings) SetWarnings(v string) {
	o.Warnings = v
}

func (o CorosyncSettings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CorosyncSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["corosync_authkey"] = o.CorosyncAuthkey
	toSerialize["corosync_conf"] = o.CorosyncConf
	toSerialize["warnings"] = o.Warnings
	return toSerialize, nil
}

type NullableCorosyncSettings struct {
	value *CorosyncSettings
	isSet bool
}

func (v NullableCorosyncSettings) Get() *CorosyncSettings {
	return v.value
}

func (v *NullableCorosyncSettings) Set(val *CorosyncSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableCorosyncSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableCorosyncSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCorosyncSettings(val *CorosyncSettings) *NullableCorosyncSettings {
	return &NullableCorosyncSettings{value: val, isSet: true}
}

func (v NullableCorosyncSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCorosyncSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


