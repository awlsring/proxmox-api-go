/*
Proxmox

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2023-01-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package proxmox

import (
	"encoding/json"
)

// checks if the StopVirtualMachineRequestContent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StopVirtualMachineRequestContent{}

// StopVirtualMachineRequestContent struct for StopVirtualMachineRequestContent
type StopVirtualMachineRequestContent struct {
	Timeout *float32 `json:"timeout,omitempty"`
	// An integer used to represent a boolean. 0 is false, 1 is true.
	Skiplock *float32 `json:"skiplock,omitempty"`
	// Specify migrated from node.
	Migratedfrom *string `json:"migratedfrom,omitempty"`
	// Keep the storage active after stopping it.
	KeepActive *float32 `json:"keepActive,omitempty"`
}

// NewStopVirtualMachineRequestContent instantiates a new StopVirtualMachineRequestContent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStopVirtualMachineRequestContent() *StopVirtualMachineRequestContent {
	this := StopVirtualMachineRequestContent{}
	return &this
}

// NewStopVirtualMachineRequestContentWithDefaults instantiates a new StopVirtualMachineRequestContent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStopVirtualMachineRequestContentWithDefaults() *StopVirtualMachineRequestContent {
	this := StopVirtualMachineRequestContent{}
	return &this
}

// GetTimeout returns the Timeout field value if set, zero value otherwise.
func (o *StopVirtualMachineRequestContent) GetTimeout() float32 {
	if o == nil || IsNil(o.Timeout) {
		var ret float32
		return ret
	}
	return *o.Timeout
}

// GetTimeoutOk returns a tuple with the Timeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StopVirtualMachineRequestContent) GetTimeoutOk() (*float32, bool) {
	if o == nil || IsNil(o.Timeout) {
		return nil, false
	}
	return o.Timeout, true
}

// HasTimeout returns a boolean if a field has been set.
func (o *StopVirtualMachineRequestContent) HasTimeout() bool {
	if o != nil && !IsNil(o.Timeout) {
		return true
	}

	return false
}

// SetTimeout gets a reference to the given float32 and assigns it to the Timeout field.
func (o *StopVirtualMachineRequestContent) SetTimeout(v float32) {
	o.Timeout = &v
}

// GetSkiplock returns the Skiplock field value if set, zero value otherwise.
func (o *StopVirtualMachineRequestContent) GetSkiplock() float32 {
	if o == nil || IsNil(o.Skiplock) {
		var ret float32
		return ret
	}
	return *o.Skiplock
}

// GetSkiplockOk returns a tuple with the Skiplock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StopVirtualMachineRequestContent) GetSkiplockOk() (*float32, bool) {
	if o == nil || IsNil(o.Skiplock) {
		return nil, false
	}
	return o.Skiplock, true
}

// HasSkiplock returns a boolean if a field has been set.
func (o *StopVirtualMachineRequestContent) HasSkiplock() bool {
	if o != nil && !IsNil(o.Skiplock) {
		return true
	}

	return false
}

// SetSkiplock gets a reference to the given float32 and assigns it to the Skiplock field.
func (o *StopVirtualMachineRequestContent) SetSkiplock(v float32) {
	o.Skiplock = &v
}

// GetMigratedfrom returns the Migratedfrom field value if set, zero value otherwise.
func (o *StopVirtualMachineRequestContent) GetMigratedfrom() string {
	if o == nil || IsNil(o.Migratedfrom) {
		var ret string
		return ret
	}
	return *o.Migratedfrom
}

// GetMigratedfromOk returns a tuple with the Migratedfrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StopVirtualMachineRequestContent) GetMigratedfromOk() (*string, bool) {
	if o == nil || IsNil(o.Migratedfrom) {
		return nil, false
	}
	return o.Migratedfrom, true
}

// HasMigratedfrom returns a boolean if a field has been set.
func (o *StopVirtualMachineRequestContent) HasMigratedfrom() bool {
	if o != nil && !IsNil(o.Migratedfrom) {
		return true
	}

	return false
}

// SetMigratedfrom gets a reference to the given string and assigns it to the Migratedfrom field.
func (o *StopVirtualMachineRequestContent) SetMigratedfrom(v string) {
	o.Migratedfrom = &v
}

// GetKeepActive returns the KeepActive field value if set, zero value otherwise.
func (o *StopVirtualMachineRequestContent) GetKeepActive() float32 {
	if o == nil || IsNil(o.KeepActive) {
		var ret float32
		return ret
	}
	return *o.KeepActive
}

// GetKeepActiveOk returns a tuple with the KeepActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StopVirtualMachineRequestContent) GetKeepActiveOk() (*float32, bool) {
	if o == nil || IsNil(o.KeepActive) {
		return nil, false
	}
	return o.KeepActive, true
}

// HasKeepActive returns a boolean if a field has been set.
func (o *StopVirtualMachineRequestContent) HasKeepActive() bool {
	if o != nil && !IsNil(o.KeepActive) {
		return true
	}

	return false
}

// SetKeepActive gets a reference to the given float32 and assigns it to the KeepActive field.
func (o *StopVirtualMachineRequestContent) SetKeepActive(v float32) {
	o.KeepActive = &v
}

func (o StopVirtualMachineRequestContent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StopVirtualMachineRequestContent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Timeout) {
		toSerialize["timeout"] = o.Timeout
	}
	if !IsNil(o.Skiplock) {
		toSerialize["skiplock"] = o.Skiplock
	}
	if !IsNil(o.Migratedfrom) {
		toSerialize["migratedfrom"] = o.Migratedfrom
	}
	if !IsNil(o.KeepActive) {
		toSerialize["keepActive"] = o.KeepActive
	}
	return toSerialize, nil
}

type NullableStopVirtualMachineRequestContent struct {
	value *StopVirtualMachineRequestContent
	isSet bool
}

func (v NullableStopVirtualMachineRequestContent) Get() *StopVirtualMachineRequestContent {
	return v.value
}

func (v *NullableStopVirtualMachineRequestContent) Set(val *StopVirtualMachineRequestContent) {
	v.value = val
	v.isSet = true
}

func (v NullableStopVirtualMachineRequestContent) IsSet() bool {
	return v.isSet
}

func (v *NullableStopVirtualMachineRequestContent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStopVirtualMachineRequestContent(val *StopVirtualMachineRequestContent) *NullableStopVirtualMachineRequestContent {
	return &NullableStopVirtualMachineRequestContent{value: val, isSet: true}
}

func (v NullableStopVirtualMachineRequestContent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStopVirtualMachineRequestContent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


