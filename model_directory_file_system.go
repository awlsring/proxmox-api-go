/*
Proxmox

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2023-01-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// DirectoryFileSystem the model 'DirectoryFileSystem'
type DirectoryFileSystem string

// List of DirectoryFileSystem
const (
	DIRECTORYFILESYSTEM_EXT4 DirectoryFileSystem = "ext4"
	DIRECTORYFILESYSTEM_XFS DirectoryFileSystem = "xfs"
)

// All allowed values of DirectoryFileSystem enum
var AllowedDirectoryFileSystemEnumValues = []DirectoryFileSystem{
	"ext4",
	"xfs",
}

func (v *DirectoryFileSystem) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DirectoryFileSystem(value)
	for _, existing := range AllowedDirectoryFileSystemEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DirectoryFileSystem", value)
}

// NewDirectoryFileSystemFromValue returns a pointer to a valid DirectoryFileSystem
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDirectoryFileSystemFromValue(v string) (*DirectoryFileSystem, error) {
	ev := DirectoryFileSystem(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DirectoryFileSystem: valid values are %v", v, AllowedDirectoryFileSystemEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DirectoryFileSystem) IsValid() bool {
	for _, existing := range AllowedDirectoryFileSystemEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DirectoryFileSystem value
func (v DirectoryFileSystem) Ptr() *DirectoryFileSystem {
	return &v
}

type NullableDirectoryFileSystem struct {
	value *DirectoryFileSystem
	isSet bool
}

func (v NullableDirectoryFileSystem) Get() *DirectoryFileSystem {
	return v.value
}

func (v *NullableDirectoryFileSystem) Set(val *DirectoryFileSystem) {
	v.value = val
	v.isSet = true
}

func (v NullableDirectoryFileSystem) IsSet() bool {
	return v.isSet
}

func (v *NullableDirectoryFileSystem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDirectoryFileSystem(val *DirectoryFileSystem) *NullableDirectoryFileSystem {
	return &NullableDirectoryFileSystem{value: val, isSet: true}
}

func (v NullableDirectoryFileSystem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDirectoryFileSystem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

