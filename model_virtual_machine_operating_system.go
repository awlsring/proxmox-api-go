/*
Proxmox

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2023-01-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VirtualMachineOperatingSystem the model 'VirtualMachineOperatingSystem'
type VirtualMachineOperatingSystem string

// List of VirtualMachineOperatingSystem
const (
	VIRTUALMACHINEOPERATINGSYSTEM_OTHER VirtualMachineOperatingSystem = "other"
	VIRTUALMACHINEOPERATINGSYSTEM_WXP VirtualMachineOperatingSystem = "wxp"
	VIRTUALMACHINEOPERATINGSYSTEM_W2K3 VirtualMachineOperatingSystem = "w2k3"
	VIRTUALMACHINEOPERATINGSYSTEM_W2K VirtualMachineOperatingSystem = "w2k"
	VIRTUALMACHINEOPERATINGSYSTEM_W2K8 VirtualMachineOperatingSystem = "w2k8"
	VIRTUALMACHINEOPERATINGSYSTEM_WVISTA VirtualMachineOperatingSystem = "wvista"
	VIRTUALMACHINEOPERATINGSYSTEM_W7 VirtualMachineOperatingSystem = "w7"
	VIRTUALMACHINEOPERATINGSYSTEM_W8 VirtualMachineOperatingSystem = "w8"
	VIRTUALMACHINEOPERATINGSYSTEM_W10 VirtualMachineOperatingSystem = "w10"
	VIRTUALMACHINEOPERATINGSYSTEM_W11 VirtualMachineOperatingSystem = "w11"
	VIRTUALMACHINEOPERATINGSYSTEM_L24 VirtualMachineOperatingSystem = "l24"
	VIRTUALMACHINEOPERATINGSYSTEM_L26 VirtualMachineOperatingSystem = "l26"
	VIRTUALMACHINEOPERATINGSYSTEM_SOLARIS VirtualMachineOperatingSystem = "solaris"
)

// All allowed values of VirtualMachineOperatingSystem enum
var AllowedVirtualMachineOperatingSystemEnumValues = []VirtualMachineOperatingSystem{
	"other",
	"wxp",
	"w2k3",
	"w2k",
	"w2k8",
	"wvista",
	"w7",
	"w8",
	"w10",
	"w11",
	"l24",
	"l26",
	"solaris",
}

func (v *VirtualMachineOperatingSystem) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VirtualMachineOperatingSystem(value)
	for _, existing := range AllowedVirtualMachineOperatingSystemEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VirtualMachineOperatingSystem", value)
}

// NewVirtualMachineOperatingSystemFromValue returns a pointer to a valid VirtualMachineOperatingSystem
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVirtualMachineOperatingSystemFromValue(v string) (*VirtualMachineOperatingSystem, error) {
	ev := VirtualMachineOperatingSystem(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VirtualMachineOperatingSystem: valid values are %v", v, AllowedVirtualMachineOperatingSystemEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VirtualMachineOperatingSystem) IsValid() bool {
	for _, existing := range AllowedVirtualMachineOperatingSystemEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VirtualMachineOperatingSystem value
func (v VirtualMachineOperatingSystem) Ptr() *VirtualMachineOperatingSystem {
	return &v
}

type NullableVirtualMachineOperatingSystem struct {
	value *VirtualMachineOperatingSystem
	isSet bool
}

func (v NullableVirtualMachineOperatingSystem) Get() *VirtualMachineOperatingSystem {
	return v.value
}

func (v *NullableVirtualMachineOperatingSystem) Set(val *VirtualMachineOperatingSystem) {
	v.value = val
	v.isSet = true
}

func (v NullableVirtualMachineOperatingSystem) IsSet() bool {
	return v.isSet
}

func (v *NullableVirtualMachineOperatingSystem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVirtualMachineOperatingSystem(val *VirtualMachineOperatingSystem) *NullableVirtualMachineOperatingSystem {
	return &NullableVirtualMachineOperatingSystem{value: val, isSet: true}
}

func (v NullableVirtualMachineOperatingSystem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVirtualMachineOperatingSystem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

