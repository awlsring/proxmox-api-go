/*
Proxmox

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2023-01-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// NetworkInterfaceType the model 'NetworkInterfaceType'
type NetworkInterfaceType string

// List of NetworkInterfaceType
const (
	NETWORKINTERFACETYPE_BRIDGE NetworkInterfaceType = "bridge"
	NETWORKINTERFACETYPE_BOND NetworkInterfaceType = "bond"
	NETWORKINTERFACETYPE_ETH NetworkInterfaceType = "eth"
	NETWORKINTERFACETYPE_ALIAS NetworkInterfaceType = "alias"
	NETWORKINTERFACETYPE_VLAN NetworkInterfaceType = "vlan"
	NETWORKINTERFACETYPE_OVS_BRIDGE NetworkInterfaceType = "OVSBridge"
	NETWORKINTERFACETYPE_OVS_BOND NetworkInterfaceType = "OVSBond"
	NETWORKINTERFACETYPE_OVS_PORT NetworkInterfaceType = "OVSPort"
	NETWORKINTERFACETYPE_OVS_INT_PORT NetworkInterfaceType = "OVSIntPort"
	NETWORKINTERFACETYPE_UNKNOWN NetworkInterfaceType = "unknown"
)

// All allowed values of NetworkInterfaceType enum
var AllowedNetworkInterfaceTypeEnumValues = []NetworkInterfaceType{
	"bridge",
	"bond",
	"eth",
	"alias",
	"vlan",
	"OVSBridge",
	"OVSBond",
	"OVSPort",
	"OVSIntPort",
	"unknown",
}

func (v *NetworkInterfaceType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := NetworkInterfaceType(value)
	for _, existing := range AllowedNetworkInterfaceTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid NetworkInterfaceType", value)
}

// NewNetworkInterfaceTypeFromValue returns a pointer to a valid NetworkInterfaceType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewNetworkInterfaceTypeFromValue(v string) (*NetworkInterfaceType, error) {
	ev := NetworkInterfaceType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for NetworkInterfaceType: valid values are %v", v, AllowedNetworkInterfaceTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v NetworkInterfaceType) IsValid() bool {
	for _, existing := range AllowedNetworkInterfaceTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to NetworkInterfaceType value
func (v NetworkInterfaceType) Ptr() *NetworkInterfaceType {
	return &v
}

type NullableNetworkInterfaceType struct {
	value *NetworkInterfaceType
	isSet bool
}

func (v NullableNetworkInterfaceType) Get() *NetworkInterfaceType {
	return v.value
}

func (v *NullableNetworkInterfaceType) Set(val *NetworkInterfaceType) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkInterfaceType) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkInterfaceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkInterfaceType(val *NetworkInterfaceType) *NullableNetworkInterfaceType {
	return &NullableNetworkInterfaceType{value: val, isSet: true}
}

func (v NullableNetworkInterfaceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkInterfaceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

