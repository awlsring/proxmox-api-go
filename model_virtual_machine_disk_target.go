/*
Proxmox

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2023-01-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VirtualMachineDiskTarget the model 'VirtualMachineDiskTarget'
type VirtualMachineDiskTarget string

// List of VirtualMachineDiskTarget
const (
	VIRTUALMACHINEDISKTARGET_IDE0 VirtualMachineDiskTarget = "ide0"
	VIRTUALMACHINEDISKTARGET_IDE1 VirtualMachineDiskTarget = "ide1"
	VIRTUALMACHINEDISKTARGET_IDE2 VirtualMachineDiskTarget = "ide2"
	VIRTUALMACHINEDISKTARGET_IDE3 VirtualMachineDiskTarget = "ide3"
	VIRTUALMACHINEDISKTARGET_SCSI0 VirtualMachineDiskTarget = "scsi0"
	VIRTUALMACHINEDISKTARGET_SCSI1 VirtualMachineDiskTarget = "scsi1"
	VIRTUALMACHINEDISKTARGET_SCSI2 VirtualMachineDiskTarget = "scsi2"
	VIRTUALMACHINEDISKTARGET_SCSI3 VirtualMachineDiskTarget = "scsi3"
	VIRTUALMACHINEDISKTARGET_SCSI4 VirtualMachineDiskTarget = "scsi4"
	VIRTUALMACHINEDISKTARGET_SCSI5 VirtualMachineDiskTarget = "scsi5"
	VIRTUALMACHINEDISKTARGET_SCSI6 VirtualMachineDiskTarget = "scsi6"
	VIRTUALMACHINEDISKTARGET_SCSI7 VirtualMachineDiskTarget = "scsi7"
	VIRTUALMACHINEDISKTARGET_SCSI8 VirtualMachineDiskTarget = "scsi8"
	VIRTUALMACHINEDISKTARGET_SCSI9 VirtualMachineDiskTarget = "scsi9"
	VIRTUALMACHINEDISKTARGET_SCSI10 VirtualMachineDiskTarget = "scsi10"
	VIRTUALMACHINEDISKTARGET_SCSI11 VirtualMachineDiskTarget = "scsi11"
	VIRTUALMACHINEDISKTARGET_SCSI12 VirtualMachineDiskTarget = "scsi12"
	VIRTUALMACHINEDISKTARGET_SCSI13 VirtualMachineDiskTarget = "scsi13"
	VIRTUALMACHINEDISKTARGET_SCSI14 VirtualMachineDiskTarget = "scsi14"
	VIRTUALMACHINEDISKTARGET_SCSI15 VirtualMachineDiskTarget = "scsi15"
	VIRTUALMACHINEDISKTARGET_SCSI16 VirtualMachineDiskTarget = "scsi16"
	VIRTUALMACHINEDISKTARGET_SCSI17 VirtualMachineDiskTarget = "scsi17"
	VIRTUALMACHINEDISKTARGET_SCSI18 VirtualMachineDiskTarget = "scsi18"
	VIRTUALMACHINEDISKTARGET_SCSI19 VirtualMachineDiskTarget = "scsi19"
	VIRTUALMACHINEDISKTARGET_SCSI20 VirtualMachineDiskTarget = "scsi20"
	VIRTUALMACHINEDISKTARGET_SCSI21 VirtualMachineDiskTarget = "scsi21"
	VIRTUALMACHINEDISKTARGET_SCSI22 VirtualMachineDiskTarget = "scsi22"
	VIRTUALMACHINEDISKTARGET_SCSI23 VirtualMachineDiskTarget = "scsi23"
	VIRTUALMACHINEDISKTARGET_SCSI24 VirtualMachineDiskTarget = "scsi24"
	VIRTUALMACHINEDISKTARGET_SCSI25 VirtualMachineDiskTarget = "scsi25"
	VIRTUALMACHINEDISKTARGET_SCSI26 VirtualMachineDiskTarget = "scsi26"
	VIRTUALMACHINEDISKTARGET_SCSI27 VirtualMachineDiskTarget = "scsi27"
	VIRTUALMACHINEDISKTARGET_SCSI28 VirtualMachineDiskTarget = "scsi28"
	VIRTUALMACHINEDISKTARGET_SCSI29 VirtualMachineDiskTarget = "scsi29"
	VIRTUALMACHINEDISKTARGET_SCSI30 VirtualMachineDiskTarget = "scsi30"
	VIRTUALMACHINEDISKTARGET_VIRTIO0 VirtualMachineDiskTarget = "virtio0"
	VIRTUALMACHINEDISKTARGET_VIRTIO1 VirtualMachineDiskTarget = "virtio1"
	VIRTUALMACHINEDISKTARGET_VIRTIO2 VirtualMachineDiskTarget = "virtio2"
	VIRTUALMACHINEDISKTARGET_VIRTIO3 VirtualMachineDiskTarget = "virtio3"
	VIRTUALMACHINEDISKTARGET_VIRTIO4 VirtualMachineDiskTarget = "virtio4"
	VIRTUALMACHINEDISKTARGET_VIRTIO5 VirtualMachineDiskTarget = "virtio5"
	VIRTUALMACHINEDISKTARGET_VIRTIO6 VirtualMachineDiskTarget = "virtio6"
	VIRTUALMACHINEDISKTARGET_VIRTIO7 VirtualMachineDiskTarget = "virtio7"
	VIRTUALMACHINEDISKTARGET_VIRTIO8 VirtualMachineDiskTarget = "virtio8"
	VIRTUALMACHINEDISKTARGET_VIRTIO9 VirtualMachineDiskTarget = "virtio9"
	VIRTUALMACHINEDISKTARGET_VIRTIO10 VirtualMachineDiskTarget = "virtio10"
	VIRTUALMACHINEDISKTARGET_VIRTIO11 VirtualMachineDiskTarget = "virtio11"
	VIRTUALMACHINEDISKTARGET_VIRTIO12 VirtualMachineDiskTarget = "virtio12"
	VIRTUALMACHINEDISKTARGET_VIRTIO13 VirtualMachineDiskTarget = "virtio13"
	VIRTUALMACHINEDISKTARGET_VIRTIO14 VirtualMachineDiskTarget = "virtio14"
	VIRTUALMACHINEDISKTARGET_VIRTIO15 VirtualMachineDiskTarget = "virtio15"
	VIRTUALMACHINEDISKTARGET_SATA0 VirtualMachineDiskTarget = "sata0"
	VIRTUALMACHINEDISKTARGET_SATA1 VirtualMachineDiskTarget = "sata1"
	VIRTUALMACHINEDISKTARGET_SATA2 VirtualMachineDiskTarget = "sata2"
	VIRTUALMACHINEDISKTARGET_SATA3 VirtualMachineDiskTarget = "sata3"
	VIRTUALMACHINEDISKTARGET_SATA4 VirtualMachineDiskTarget = "sata4"
	VIRTUALMACHINEDISKTARGET_SATA5 VirtualMachineDiskTarget = "sata5"
	VIRTUALMACHINEDISKTARGET_EFIDISK0 VirtualMachineDiskTarget = "efidisk0"
	VIRTUALMACHINEDISKTARGET_TPMSTATE0 VirtualMachineDiskTarget = "tpmstate0"
)

// All allowed values of VirtualMachineDiskTarget enum
var AllowedVirtualMachineDiskTargetEnumValues = []VirtualMachineDiskTarget{
	"ide0",
	"ide1",
	"ide2",
	"ide3",
	"scsi0",
	"scsi1",
	"scsi2",
	"scsi3",
	"scsi4",
	"scsi5",
	"scsi6",
	"scsi7",
	"scsi8",
	"scsi9",
	"scsi10",
	"scsi11",
	"scsi12",
	"scsi13",
	"scsi14",
	"scsi15",
	"scsi16",
	"scsi17",
	"scsi18",
	"scsi19",
	"scsi20",
	"scsi21",
	"scsi22",
	"scsi23",
	"scsi24",
	"scsi25",
	"scsi26",
	"scsi27",
	"scsi28",
	"scsi29",
	"scsi30",
	"virtio0",
	"virtio1",
	"virtio2",
	"virtio3",
	"virtio4",
	"virtio5",
	"virtio6",
	"virtio7",
	"virtio8",
	"virtio9",
	"virtio10",
	"virtio11",
	"virtio12",
	"virtio13",
	"virtio14",
	"virtio15",
	"sata0",
	"sata1",
	"sata2",
	"sata3",
	"sata4",
	"sata5",
	"efidisk0",
	"tpmstate0",
}

func (v *VirtualMachineDiskTarget) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VirtualMachineDiskTarget(value)
	for _, existing := range AllowedVirtualMachineDiskTargetEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VirtualMachineDiskTarget", value)
}

// NewVirtualMachineDiskTargetFromValue returns a pointer to a valid VirtualMachineDiskTarget
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVirtualMachineDiskTargetFromValue(v string) (*VirtualMachineDiskTarget, error) {
	ev := VirtualMachineDiskTarget(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VirtualMachineDiskTarget: valid values are %v", v, AllowedVirtualMachineDiskTargetEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VirtualMachineDiskTarget) IsValid() bool {
	for _, existing := range AllowedVirtualMachineDiskTargetEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VirtualMachineDiskTarget value
func (v VirtualMachineDiskTarget) Ptr() *VirtualMachineDiskTarget {
	return &v
}

type NullableVirtualMachineDiskTarget struct {
	value *VirtualMachineDiskTarget
	isSet bool
}

func (v NullableVirtualMachineDiskTarget) Get() *VirtualMachineDiskTarget {
	return v.value
}

func (v *NullableVirtualMachineDiskTarget) Set(val *VirtualMachineDiskTarget) {
	v.value = val
	v.isSet = true
}

func (v NullableVirtualMachineDiskTarget) IsSet() bool {
	return v.isSet
}

func (v *NullableVirtualMachineDiskTarget) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVirtualMachineDiskTarget(val *VirtualMachineDiskTarget) *NullableVirtualMachineDiskTarget {
	return &NullableVirtualMachineDiskTarget{value: val, isSet: true}
}

func (v NullableVirtualMachineDiskTarget) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVirtualMachineDiskTarget) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

