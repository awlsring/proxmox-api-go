/*
Proxmox

Testing DefaultApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
    "context"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    "testing"
    openapiclient "./openapi"
)

func Test_openapi_DefaultApiService(t *testing.T) {

    configuration := openapiclient.NewConfiguration()
    apiClient := openapiclient.NewAPIClient(configuration)

    t.Run("Test DefaultApiService AddCorosyncNode", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var node string

        resp, httpRes, err := apiClient.DefaultApi.AddCorosyncNode(context.Background(), node).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DefaultApiService ApplyNetworkInterfaceConfiguration", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var node string

        resp, httpRes, err := apiClient.DefaultApi.ApplyNetworkInterfaceConfiguration(context.Background(), node).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DefaultApiService CreateClusterConfig", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.DefaultApi.CreateClusterConfig(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DefaultApiService CreateNetworkInterface", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var node string

        resp, httpRes, err := apiClient.DefaultApi.CreateNetworkInterface(context.Background(), node).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DefaultApiService CreateTicket", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.DefaultApi.CreateTicket(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DefaultApiService DeleteNetworkInterface", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var node string
        var interface_ string

        resp, httpRes, err := apiClient.DefaultApi.DeleteNetworkInterface(context.Background(), node, interface_).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DefaultApiService GetAccessControlList", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.DefaultApi.GetAccessControlList(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DefaultApiService GetClusterApiVersion", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.DefaultApi.GetClusterApiVersion(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DefaultApiService GetClusterJoinInformation", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.DefaultApi.GetClusterJoinInformation(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DefaultApiService GetClusterTotemSettings", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.DefaultApi.GetClusterTotemSettings(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DefaultApiService GetNetworkInterface", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var node string
        var interface_ string

        resp, httpRes, err := apiClient.DefaultApi.GetNetworkInterface(context.Background(), node, interface_).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DefaultApiService GetSmartHealth", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var node string

        resp, httpRes, err := apiClient.DefaultApi.GetSmartHealth(context.Background(), node).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DefaultApiService GetVersion", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.DefaultApi.GetVersion(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DefaultApiService InitializeGPT", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var node string

        resp, httpRes, err := apiClient.DefaultApi.InitializeGPT(context.Background(), node).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DefaultApiService JoinCluster", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.DefaultApi.JoinCluster(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DefaultApiService ListCorosyncNodes", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.DefaultApi.ListCorosyncNodes(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DefaultApiService ListCpuCapabilities", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var node string

        resp, httpRes, err := apiClient.DefaultApi.ListCpuCapabilities(context.Background(), node).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DefaultApiService ListDisks", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var node string

        resp, httpRes, err := apiClient.DefaultApi.ListDisks(context.Background(), node).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DefaultApiService ListMachineCapabilities", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var node string

        resp, httpRes, err := apiClient.DefaultApi.ListMachineCapabilities(context.Background(), node).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DefaultApiService ListNetworkInterfaces", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var node string

        resp, httpRes, err := apiClient.DefaultApi.ListNetworkInterfaces(context.Background(), node).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DefaultApiService ListNodes", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.DefaultApi.ListNodes(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DefaultApiService ListStorage", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.DefaultApi.ListStorage(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DefaultApiService ListVirtualMachines", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var node string

        resp, httpRes, err := apiClient.DefaultApi.ListVirtualMachines(context.Background(), node).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DefaultApiService RemoveCorosyncNode", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var node string

        resp, httpRes, err := apiClient.DefaultApi.RemoveCorosyncNode(context.Background(), node).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DefaultApiService RevertNetworkInterfaceConfiguration", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var node string

        resp, httpRes, err := apiClient.DefaultApi.RevertNetworkInterfaceConfiguration(context.Background(), node).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DefaultApiService UpdateAccessControlList", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.DefaultApi.UpdateAccessControlList(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DefaultApiService UpdateNetworkInterface", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var node string
        var interface_ string

        resp, httpRes, err := apiClient.DefaultApi.UpdateNetworkInterface(context.Background(), node, interface_).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DefaultApiService WipeDisk", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var node string

        resp, httpRes, err := apiClient.DefaultApi.WipeDisk(context.Background(), node).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

}
