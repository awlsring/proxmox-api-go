/*
Proxmox

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2023-01-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VirtualMachineHugePages the model 'VirtualMachineHugePages'
type VirtualMachineHugePages string

// List of VirtualMachineHugePages
const (
	VIRTUALMACHINEHUGEPAGES_ANY VirtualMachineHugePages = "any"
	VIRTUALMACHINEHUGEPAGES__2 VirtualMachineHugePages = "2"
	VIRTUALMACHINEHUGEPAGES__1024 VirtualMachineHugePages = "1024"
)

// All allowed values of VirtualMachineHugePages enum
var AllowedVirtualMachineHugePagesEnumValues = []VirtualMachineHugePages{
	"any",
	"2",
	"1024",
}

func (v *VirtualMachineHugePages) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VirtualMachineHugePages(value)
	for _, existing := range AllowedVirtualMachineHugePagesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VirtualMachineHugePages", value)
}

// NewVirtualMachineHugePagesFromValue returns a pointer to a valid VirtualMachineHugePages
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVirtualMachineHugePagesFromValue(v string) (*VirtualMachineHugePages, error) {
	ev := VirtualMachineHugePages(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VirtualMachineHugePages: valid values are %v", v, AllowedVirtualMachineHugePagesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VirtualMachineHugePages) IsValid() bool {
	for _, existing := range AllowedVirtualMachineHugePagesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VirtualMachineHugePages value
func (v VirtualMachineHugePages) Ptr() *VirtualMachineHugePages {
	return &v
}

type NullableVirtualMachineHugePages struct {
	value *VirtualMachineHugePages
	isSet bool
}

func (v NullableVirtualMachineHugePages) Get() *VirtualMachineHugePages {
	return v.value
}

func (v *NullableVirtualMachineHugePages) Set(val *VirtualMachineHugePages) {
	v.value = val
	v.isSet = true
}

func (v NullableVirtualMachineHugePages) IsSet() bool {
	return v.isSet
}

func (v *NullableVirtualMachineHugePages) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVirtualMachineHugePages(val *VirtualMachineHugePages) *NullableVirtualMachineHugePages {
	return &NullableVirtualMachineHugePages{value: val, isSet: true}
}

func (v NullableVirtualMachineHugePages) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVirtualMachineHugePages) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

