/*
Proxmox

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2023-01-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VirtualMachineConfigLock the model 'VirtualMachineConfigLock'
type VirtualMachineConfigLock string

// List of VirtualMachineConfigLock
const (
	VIRTUALMACHINECONFIGLOCK_BACKUP VirtualMachineConfigLock = "backup"
	VIRTUALMACHINECONFIGLOCK_CLONE VirtualMachineConfigLock = "clone"
	VIRTUALMACHINECONFIGLOCK_CREATE VirtualMachineConfigLock = "create"
	VIRTUALMACHINECONFIGLOCK_MIGRATE VirtualMachineConfigLock = "migrate"
	VIRTUALMACHINECONFIGLOCK_ROLLBACK VirtualMachineConfigLock = "rollback"
	VIRTUALMACHINECONFIGLOCK_SNAPSHOT VirtualMachineConfigLock = "snapshot"
	VIRTUALMACHINECONFIGLOCK_SNAPSHOT_DELETE VirtualMachineConfigLock = "snapshot-delete"
	VIRTUALMACHINECONFIGLOCK_SUSPENDING VirtualMachineConfigLock = "suspending"
	VIRTUALMACHINECONFIGLOCK_SUSPENDED VirtualMachineConfigLock = "suspended"
)

// All allowed values of VirtualMachineConfigLock enum
var AllowedVirtualMachineConfigLockEnumValues = []VirtualMachineConfigLock{
	"backup",
	"clone",
	"create",
	"migrate",
	"rollback",
	"snapshot",
	"snapshot-delete",
	"suspending",
	"suspended",
}

func (v *VirtualMachineConfigLock) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VirtualMachineConfigLock(value)
	for _, existing := range AllowedVirtualMachineConfigLockEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VirtualMachineConfigLock", value)
}

// NewVirtualMachineConfigLockFromValue returns a pointer to a valid VirtualMachineConfigLock
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVirtualMachineConfigLockFromValue(v string) (*VirtualMachineConfigLock, error) {
	ev := VirtualMachineConfigLock(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VirtualMachineConfigLock: valid values are %v", v, AllowedVirtualMachineConfigLockEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VirtualMachineConfigLock) IsValid() bool {
	for _, existing := range AllowedVirtualMachineConfigLockEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VirtualMachineConfigLock value
func (v VirtualMachineConfigLock) Ptr() *VirtualMachineConfigLock {
	return &v
}

type NullableVirtualMachineConfigLock struct {
	value *VirtualMachineConfigLock
	isSet bool
}

func (v NullableVirtualMachineConfigLock) Get() *VirtualMachineConfigLock {
	return v.value
}

func (v *NullableVirtualMachineConfigLock) Set(val *VirtualMachineConfigLock) {
	v.value = val
	v.isSet = true
}

func (v NullableVirtualMachineConfigLock) IsSet() bool {
	return v.isSet
}

func (v *NullableVirtualMachineConfigLock) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVirtualMachineConfigLock(val *VirtualMachineConfigLock) *NullableVirtualMachineConfigLock {
	return &NullableVirtualMachineConfigLock{value: val, isSet: true}
}

func (v NullableVirtualMachineConfigLock) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVirtualMachineConfigLock) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

