/*
Proxmox

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2023-01-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// StorageSMBVersion the model 'StorageSMBVersion'
type StorageSMBVersion string

// List of StorageSMBVersion
const (
	STORAGESMBVERSION_DEFAULT StorageSMBVersion = "default"
	STORAGESMBVERSION__2_0 StorageSMBVersion = "2.0"
	STORAGESMBVERSION__3_0 StorageSMBVersion = "3.0"
	STORAGESMBVERSION__2_1 StorageSMBVersion = "2.1"
	STORAGESMBVERSION__3_11 StorageSMBVersion = "3.11"
)

// All allowed values of StorageSMBVersion enum
var AllowedStorageSMBVersionEnumValues = []StorageSMBVersion{
	"default",
	"2.0",
	"3.0",
	"2.1",
	"3.11",
}

func (v *StorageSMBVersion) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := StorageSMBVersion(value)
	for _, existing := range AllowedStorageSMBVersionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid StorageSMBVersion", value)
}

// NewStorageSMBVersionFromValue returns a pointer to a valid StorageSMBVersion
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewStorageSMBVersionFromValue(v string) (*StorageSMBVersion, error) {
	ev := StorageSMBVersion(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for StorageSMBVersion: valid values are %v", v, AllowedStorageSMBVersionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v StorageSMBVersion) IsValid() bool {
	for _, existing := range AllowedStorageSMBVersionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to StorageSMBVersion value
func (v StorageSMBVersion) Ptr() *StorageSMBVersion {
	return &v
}

type NullableStorageSMBVersion struct {
	value *StorageSMBVersion
	isSet bool
}

func (v NullableStorageSMBVersion) Get() *StorageSMBVersion {
	return v.value
}

func (v *NullableStorageSMBVersion) Set(val *StorageSMBVersion) {
	v.value = val
	v.isSet = true
}

func (v NullableStorageSMBVersion) IsSet() bool {
	return v.isSet
}

func (v *NullableStorageSMBVersion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStorageSMBVersion(val *StorageSMBVersion) *NullableStorageSMBVersion {
	return &NullableStorageSMBVersion{value: val, isSet: true}
}

func (v NullableStorageSMBVersion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStorageSMBVersion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

