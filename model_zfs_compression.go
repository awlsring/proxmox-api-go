/*
Proxmox

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2023-01-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ZFSCompression the model 'ZFSCompression'
type ZFSCompression string

// List of ZFSCompression
const (
	ZFSCOMPRESSION_ON ZFSCompression = "on"
	ZFSCOMPRESSION_OFF ZFSCompression = "off"
	ZFSCOMPRESSION_LZ4 ZFSCompression = "lz4"
	ZFSCOMPRESSION_LZJB ZFSCompression = "lzjb"
	ZFSCOMPRESSION_GZIP ZFSCompression = "gzip"
	ZFSCOMPRESSION_ZLE ZFSCompression = "zle"
	ZFSCOMPRESSION_ZSTD ZFSCompression = "zstd"
)

// All allowed values of ZFSCompression enum
var AllowedZFSCompressionEnumValues = []ZFSCompression{
	"on",
	"off",
	"lz4",
	"lzjb",
	"gzip",
	"zle",
	"zstd",
}

func (v *ZFSCompression) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ZFSCompression(value)
	for _, existing := range AllowedZFSCompressionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ZFSCompression", value)
}

// NewZFSCompressionFromValue returns a pointer to a valid ZFSCompression
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewZFSCompressionFromValue(v string) (*ZFSCompression, error) {
	ev := ZFSCompression(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ZFSCompression: valid values are %v", v, AllowedZFSCompressionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ZFSCompression) IsValid() bool {
	for _, existing := range AllowedZFSCompressionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ZFSCompression value
func (v ZFSCompression) Ptr() *ZFSCompression {
	return &v
}

type NullableZFSCompression struct {
	value *ZFSCompression
	isSet bool
}

func (v NullableZFSCompression) Get() *ZFSCompression {
	return v.value
}

func (v *NullableZFSCompression) Set(val *ZFSCompression) {
	v.value = val
	v.isSet = true
}

func (v NullableZFSCompression) IsSet() bool {
	return v.isSet
}

func (v *NullableZFSCompression) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableZFSCompression(val *ZFSCompression) *NullableZFSCompression {
	return &NullableZFSCompression{value: val, isSet: true}
}

func (v NullableZFSCompression) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableZFSCompression) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

